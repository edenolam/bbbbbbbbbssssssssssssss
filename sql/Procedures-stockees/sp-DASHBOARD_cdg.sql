DELIMITER $$

DROP PROCEDURE IF EXISTS DASHBOARD_cdg
$$

CREATE PROCEDURE DASHBOARD_cdg(pIdUtil INT, pIdCamp INT, pCdDepaList VARCHAR(2000))
  COMMENT 'Récupération des informations permettant la constitution du dashboard CDG'
LANGUAGE SQL
  SQL SECURITY DEFINER
  doWork: BEGIN
    DECLARE totalSIASP DECIMAL;

    #
    # Vérification parametre entrée
    #

    IF pCdDepaList IS NULL OR LENGTH(pCdDepaList) < 1 THEN
      SIGNAL SQLSTATE '01000' SET MESSAGE_TEXT = 'Au moins un département doit être sélectionné.';
      LEAVE doWork;
    END IF;

    #
    # Mémorisation des codes départements demandés
    #

    DROP TEMPORARY TABLE IF EXISTS temp_CodeDepa;
	CREATE TEMPORARY TABLE temp_CodeDepa(
      codeDepa VARCHAR(4) NOT NULL PRIMARY KEY
    ) ENGINE = MEMORY;

    SET @valuesCodeDepa = REPLACE(pCdDepaList, ' ', '');  # purge des espaces
    SET @valuesCodeDepa = REPLACE(@valuesCodeDepa, ',', '''),(''');
    SET @valuesCodeDepa = CONCAT('(''', @valuesCodeDepa, ''')');

    SET @sqlCodeDepa = CONCAT('INSERT INTO temp_CodeDepa (codeDepa) VALUES ', @valuesCodeDepa);
    PREPARE stmtCodeDepa FROM @sqlCodeDepa;
    EXECUTE stmtCodeDepa;
    DEALLOCATE PREPARE stmtCodeDepa;

    #
    # Récupération de la liste des Collectivités accessibles (droits)
    #

    DROP TEMPORARY TABLE IF EXISTS temp_Coll;
    CREATE TEMPORARY TABLE temp_Coll(
      ID_COLL INT NOT NULL PRIMARY KEY,
      LB_COLL VARCHAR(150) NOT NULL,
      NM_SIRE VARCHAR(14) NOT NULL,
      BL_CT_CDG BOOLEAN,
      ID_UTIL INT,
      DT_LASTCONN DATETIME,
      ID_ENQU INT,
      ID_HISTBILASOCI INT,
      DT_CHGT DATETIME,
	  TYPE_INIT VARCHAR(150),
      FG_STAT VARCHAR(1) DEFAULT 6,
      ID_BILASOCICONS INT,
      ID_BILASOCIAGEN INT,
      NB_EMPLOYES INT DEFAULT 0,
      NB_INCOHERENCES INT DEFAULT 0,
	  NB_PC_HAND INT DEFAULT 0,
	  NB_PC_RASSCT INT DEFAULT 0,
	  NB_PC_GPEEC INT DEFAULT 0,
	  NB_PC_BSC INT DEFAULT 0
    ) ENGINE = MEMORY;	
	
	
    INSERT INTO temp_Coll(ID_COLL, LB_COLL, NM_SIRE, BL_CT_CDG, ID_UTIL, DT_LASTCONN, FG_STAT, TYPE_INIT, DT_CHGT, NB_INCOHERENCES, NB_EMPLOYES, ID_BILASOCICONS, ID_HISTBILASOCI, NB_PC_HAND, NB_PC_RASSCT, NB_PC_GPEEC, NB_PC_BSC)
	SELECT c4_.ID_COLL, c4_.LB_COLL, c4_.NM_SIRE, c4_.BL_CT_CDG, u8_.ID_UTIL, u8_.DT_LASTCONN, h0_.FG_STAT, ibs_.INIT_SOURCE, h0_.DT_CHGT, IFNULL(NB_INCOHERENCES, 0), IFNULL(b9_.NB_AGENT_TITULAIRE, 0) + IFNULL(b9_.NB_AGENT_CONTRACTUEL_EMPLOI_PERMANENT, 0) + IFNULL(b9_.NB_AGENT_CONTRACTUEL_EMPLOI_NON_PERMANENT, 0) AS NB_EMPLOYES, b9_.ID_BILASOCICONS, h0_.ID_HISTBILASOCI, 
	
	SUM(
	COALESCE(b9_.MOYENNE_HANDITORIAL_QUESTIONS_GENERALES,0) + 
	COALESCE(b9_.MOYENNE_HANDITORIAL_QUESTIONS_BOETHS,0) +
	COALESCE(b9_.MOYENNE_HANDITORIAL_CADRE_EMPLOIS,0) + 
	COALESCE(b9_.MOYENNE_HANDITORIAL_METIERS,0) + 
	COALESCE(b9_.MOYENNE_HANDITORIAL_TEMPS_COMPLETS,0)) / 5 AS NB_PC_HANDSUM, 
	
	SUM(
	COALESCE(b9_.MOYENNE_RASSCT_ACCIDENT_TRAVAIL,0) + 
	COALESCE(b9_.MOYENNE_RASSCT_REALISATION_FORMATION_SANTE_TRAVAIL,0) + 
	COALESCE(b9_.MOYENNE_RASSCT_AUTRES_MESURES,0) + 
	COALESCE(b9_.MOYENNE_RASSCT_PREDICTIONS_AUTRES_MESURES,0) + 
	COALESCE(b9_.MOYENNE_RASSCT_NB_ACCIDENT_TRAVAIL,0) +
	COALESCE(b9_.MOYENNE_RASSCT_NATURE_LESION,0) +
	COALESCE(b9_.MOYENNE_RASSCT_SIEGE_LESION,0) +
	COALESCE(b9_.MOYENNE_RASSCT_ELEMENT_MATERIEL,0) +
	COALESCE(b9_.MOYENNE_RASSCT_MALADIE_PRO_CARAC_PRO,0) +
	COALESCE(b9_.MOYENNE_RASSCT_PREVISION_FORMATION_SANTE_TRAVAIL,0)) / 10 AS NB_PC_RASSCT,
	
	SUM(
		COALESCE(b9_.MOYENNE_GPEEC_NIVEAU_DIPLOME,0) + COALESCE(b9_.MOYENNE_GPEEC_NB_AGENTS_TIU_EMP_PERMA_PAR_FONC_ET_AGE,0) + COALESCE(IF(e2_.BL_GPEEC_PLUS = 1, b9_.MOYENNE_GPEEC_PLUS_NB_AGENTS_PAR_SPE_ET_AGE, 0),0)
	) / IF(e2_.BL_GPEEC_PLUS = 1, 3, 2) AS NB_PC_GPEEC,
	
	SUM(
	COALESCE(b9_.MOYENNE_IND110,0) + 
	COALESCE(b9_.MOYENNE_IND111,0) + 
	COALESCE(b9_.MOYENNE_IND112,0) +
	COALESCE(b9_.MOYENNE_IND113,0) +
	COALESCE(b9_.MOYENNE_IND114,0) +
	COALESCE(b9_.MOYENNE_IND121,0) + 
	COALESCE(b9_.MOYENNE_IND122,0) +
	COALESCE(b9_.MOYENNE_IND123,0) +
	COALESCE(b9_.MOYENNE_IND124,0) +
	COALESCE(b9_.MOYENNE_IND131,0) +
	COALESCE(b9_.MOYENNE_IND132,0) +
	COALESCE(b9_.MOYENNE_IND140,0) +
	COALESCE(b9_.MOYENNE_IND150,0) +
	COALESCE(b9_.MOYENNE_IND151,0) +
	COALESCE(b9_.MOYENNE_IND152,0) +
	COALESCE(b9_.MOYENNE_IND1531,0) +
	COALESCE(b9_.MOYENNE_IND1532,0) +
	COALESCE(b9_.MOYENNE_IND154,0) +
	COALESCE(b9_.MOYENNE_IND158,0) +
	COALESCE(b9_.MOYENNE_IND161,0) +
	COALESCE(b9_.MOYENNE_IND162,0) +
	COALESCE(b9_.MOYENNE_IND171,0) +
	COALESCE(b9_.MOYENNE_IND210,0) +
	COALESCE(b9_.MOYENNE_IND211,0) +
	COALESCE(b9_.MOYENNE_IND212,0) +
	COALESCE(b9_.MOYENNE_IND213,0) +
	COALESCE(b9_.MOYENNE_IND214,0) +
	COALESCE(b9_.MOYENNE_IND215,0) +
	COALESCE(b9_.MOYENNE_IND221,0) +
	COALESCE(b9_.MOYENNE_IND222,0) +
	COALESCE(b9_.MOYENNE_IND223,0) +
	COALESCE(b9_.MOYENNE_IND224,0) +
	COALESCE(b9_.MOYENNE_IND225,0) +
	COALESCE(b9_.MOYENNE_IND231,0) +
	COALESCE(b9_.MOYENNE_IND311,0) +
	COALESCE(b9_.MOYENNE_IND321,0) +
	COALESCE(b9_.MOYENNE_IND331,0) +
	COALESCE(b9_.MOYENNE_IND341,0) +
	COALESCE(b9_.MOYENNE_IND342,0) +
	COALESCE(b9_.MOYENNE_IND343,0) +
	COALESCE(b9_.MOYENNE_IND345,0) +
	COALESCE(b9_.MOYENNE_IND411,0) +
	COALESCE(b9_.MOYENNE_IND413,0) +
	COALESCE(b9_.MOYENNE_IND414,0) +
	COALESCE(b9_.MOYENNE_IND421,0) +
	COALESCE(b9_.MOYENNE_IND422,0) +
	COALESCE(b9_.MOYENNE_IND423,0) +
	COALESCE(b9_.MOYENNE_IND424,0) +
	COALESCE(b9_.MOYENNE_IND431,0) +
	COALESCE(b9_.MOYENNE_IND5111,0) +
	COALESCE(b9_.MOYENNE_IND5112,0) +
	COALESCE(b9_.MOYENNE_IND5113,0) +
	COALESCE(b9_.MOYENNE_IND512,0) +
	COALESCE(b9_.MOYENNE_IND513,0) +
	COALESCE(b9_.MOYENNE_IND514,0) +
	COALESCE(IF((c4_.ID_TYPE_COLL = 18) OR (c4_.BL_CT_CDG <> 1 AND ((e2_.BL_BILASOCI = 0  AND e2_.BL_RAST = 1) OR e2_.BL_BILASOCI = 1)), b9_.MOYENNE_IND611, 0), 0) +
	COALESCE(b9_.MOYENNE_IND612,0) +
	COALESCE(b9_.MOYENNE_IND613,0) +
	COALESCE(b9_.MOYENNE_IND614,0) +
	COALESCE(b9_.MOYENNE_IND711,0) +
	COALESCE(b9_.MOYENNE_IND712,0) +
	COALESCE(b9_.MOYENNE_IND713,0) +
	COALESCE(b9_.MOYENNE_IND714,0)
	) / IF((c4_.ID_TYPE_COLL = 18) OR (c4_.BL_CT_CDG <> 1 AND ((e2_.BL_BILASOCI = 0  AND e2_.BL_RAST = 1) OR e2_.BL_BILASOCI = 1)), 63, 62) AS NB_PC_BSC
	
	
	FROM utilisateur_droits u11_ 
	INNER JOIN utilisateur_cdg u12_ ON (u11_.ID_UTILISATEUR_CDG = u12_.ID_UTILISATEUR_CDG) 
	INNER JOIN cdg_departement c13_ ON (u11_.ID_CDG_DEPARTEMENT = c13_.ID_CDG_DEPARTEMENT) 
	INNER JOIN departement d6_ ON (d6_.ID_DEPA = c13_.ID_DEPA)
	INNER JOIN departements_enquetes de_ ON (c13_.ID_DEPA = de_.ID_DEPA)
	INNER JOIN url_map m1_ ON (de_.ID_DEPA = m1_.ID_DEPA)
	INNER JOIN temp_CodeDepa tcd ON tcd.codeDepa = d6_.CD_DEPA	  
	INNER JOIN collectivite c4_ ON (c4_.ID_DEPA = de_.ID_DEPA)
	INNER JOIN enquete e1_ ON (de_.ID_ENQU = e1_.ID_ENQU AND e1_.ID_CAMP = pIdCamp)
	INNER JOIN enquete_collectivite e2_ ON (c4_.ID_COLL = e2_.ID_COLL AND e1_.ID_ENQU = e2_.ID_ENQU) 	
	LEFT JOIN historique_bilan_social h0_ ON (h0_.ID_COLL = c4_.ID_COLL AND h0_.ID_ENQU = e1_.ID_ENQU AND h0_.DT_CHGT = (
		SELECT MAX(h15_.DT_CHGT) AS dctrn__2 
		FROM historique_bilan_social h15_ 
		WHERE h15_.ID_COLL = c4_.ID_COLL AND h15_.ID_ENQU = e1_.ID_ENQU)
	)
	LEFT JOIN init_bilan_social ibs_ ON (ibs_.ID_COLL = c4_.ID_COLL AND ibs_.ID_ENQU = e1_.ID_ENQU)  
    LEFT JOIN bilan_social_consolide b9_ ON (b9_.ID_COLL = c4_.ID_COLL AND b9_.ID_ENQU = e1_.ID_ENQU) 
	# LEFT JOIN bilan_social_agent b17_ ON (b17_.ID_COLL = c4_.ID_COLL AND b17_.ID_ENQU = e1_.ID_ENQU)
    LEFT OUTER JOIN (SELECT ID_BILASOCICONS, COUNT(id) NB_INCOHERENCES
	    FROM incoherencelog
	    GROUP BY ID_BILASOCICONS) AS il ON il.ID_BILASOCICONS = b9_.ID_BILASOCICONS
	LEFT JOIN utilisateur u8_ ON (c4_.ID_COLL = u8_.ID_COLL) 
	WHERE u12_.ID_UTIL = pIdUtil AND c4_.BL_ACTI = 1 AND CONV('0011000',2,10) & u11_.FG_DROITS IN (16, 24) AND e1_.FG_STAT = 1
	GROUP BY c4_.ID_COLL;

    # Récupération des informations relatives à la saisie du consolidé

   
    CREATE INDEX temp_Coll_idx1 ON temp_Coll (FG_STAT);
    CREATE INDEX temp_Coll_idx2 ON temp_Coll (ID_BILASOCICONS);
	CREATE INDEX temp_Coll_idx3 ON temp_Coll (ID_COLL);
	CREATE INDEX temp_Coll_idx4 ON temp_Coll (DT_LASTCONN);
	
	
	UPDATE temp_Coll SET FG_STAT = 6
    WHERE (DT_LASTCONN IS NULL AND FG_STAT NOT IN (1,2,5)) OR (DT_LASTCONN IS NULL AND FG_STAT IS NULL);

	UPDATE temp_Coll SET FG_STAT = 7
    WHERE (DT_LASTCONN IS NOT NULL AND ID_BILASOCICONS IS NULL AND ID_HISTBILASOCI IS NULL AND FG_STAT IS NULL);

    # Informations Departement
	
    SELECT d.CD_DEPA, d.LB_DEPA, um.lbUrlMap
    FROM temp_CodeDepa AS tcd
      INNER JOIN departement AS d ON CD_DEPA = tcd.codeDepa
      INNER JOIN url_map AS um ON um.ID_DEPA = d.ID_DEPA
    ORDER BY d.CD_DEPA;
	
    # Compteurs des FG_STAT
	
    SELECT FG_STAT, COUNT(ID_COLL) AS NB_COLL
    FROM temp_Coll
    GROUP BY FG_STAT
    ORDER BY FG_STAT;
	

    # Retourne les FG_STAT = 1 (transmis)
	
    SELECT ID_UTIL, ID_COLL, LB_COLL, NM_SIRE, BL_CT_CDG, NB_INCOHERENCES, TYPE_INIT, NB_PC_HAND,NB_PC_RASSCT, NB_PC_GPEEC, NB_PC_BSC, DATE_FORMAT(DT_CHGT, '%d/%m/%Y') AS DT_CHGT
    FROM temp_Coll
    WHERE FG_STAT IN(1,5);

    # Retourne les FG_STAT = 2 (validés)
	
    SELECT ID_UTIL, ID_COLL, LB_COLL, NM_SIRE, BL_CT_CDG, NB_INCOHERENCES, TYPE_INIT, NB_PC_HAND,NB_PC_RASSCT,NB_PC_GPEEC, NB_PC_BSC, DATE_FORMAT(DT_CHGT, '%d/%m/%Y') AS DT_CHGT
    FROM temp_Coll
    WHERE FG_STAT = 2;
	
	
	
	
	
    # Récupération du SIASP total pour l ensemble des départements sélectionnés
	
    SELECT SUM(IFNULL(NB_SIASP, 0.0))
    INTO totalSIASP
    FROM departement
    WHERE CD_DEPA IN (SELECT codeDepa FROM temp_CodeDepa);

    # Taux Effectif Retour Effectif
	
    IF totalSIASP > 0 THEN
      SELECT SUM(tc.NB_EMPLOYES) / totalSIASP * 100.0 AS TAUX_EFFECTIF
      FROM temp_Coll AS tc
      WHERE tc.ID_BILASOCICONS IS NOT NULL
        AND tc.FG_STAT = 2;   # Validés
    ELSE
      SELECT 0.0 AS TAUX_EFFECTIF;
    END IF;
	
	
	
	
	# DEBUG COLLECTIVITE SANS FG STAT
	# SELECT * FROM temp_Coll WHERE FG_STAT IS NULL AND DT_LASTCONN IS NULL;
	
    # Debug ALL
    # SELECT * FROM temp_Coll;
  END
$$

 # CALL DASHBOARD_cdg(91, 1, '78, 91, 95');


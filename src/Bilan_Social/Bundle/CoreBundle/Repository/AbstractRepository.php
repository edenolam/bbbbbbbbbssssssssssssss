<?php

namespace Bilan_Social\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Bilan_Social\Bundle\UserBundle\Entity\User;
use Bilan_Social\Bundle\ReferencielBundle\Enums\DroitsEnum;
use Bilan_Social\Bundle\CollectiviteBundle\Entity\Collectivite;

/**
 * AbstractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbstractRepository extends EntityRepository {

    public function applyFilters($qb, array $filtres = null) {
        $droit = bindec(DroitsEnum::MASK_READ_COLLECTIVITE);

        if($filtres !== null ){
            $tab_sql_filtres = array();
            foreach ($filtres as $key => $filtre) {
                $champ = $filtre['filtre'];
                $condition = $filtre['condition'];
                $parametre = $filtre['parametre'];

                $champ = explode('-', $champ)[0];

                $where = "";
                $where_left = "c.".$champ." ";
                switch ($champ){
                    case "blApa" :

                        $where_left = " ec.blApa";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blRass" :

                        $where_left = " ec.blRast";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blCons" :

                        $where_left = " ec.blCons";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blN4ds" :

                        $where_left = " ec.blN4ds";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blBaseCarr" :

                        $where_left = " ec.blBasecarr";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blDgcl" :

                        $where_left = " ec.blDgcl";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blHand" :

                        $where_left = " ec.blHand";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blGpee" :

                        $where_left = " ec.blGepe";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blBilaSoci" :

                    $where_left = " ec.blBilasoci";
                    switch ($parametre) {
                        case "Non" :
                            $parametre = 0;
                            break;
                        case "Non renseigné" :
                            $parametre = "NULL";
                            break;
                        case "Oui" :
                            $parametre = 1;
                            break;
                    }
                    break;
                    case "blGpeecPlus" :
                        $where_left = " ec.blGpeecPlus";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "blBilaSociVide" :

                        $where_left = " ec.blBilasocivide";
                        switch ($parametre) {
                            case "Non" :
                                $parametre = 0;
                                break;
                            case "Non renseigné" :
                                $parametre = "NULL";
                                break;
                            case "Oui" :
                                $parametre = 1;
                                break;
                        }
                        break;
                    case "fgStat" :
                        switch ($parametre) {
                            case "En cours de saisie" :
                                $parametre = 0;
                                break;
                            case "Transmis" :
                                $parametre = 1;
                                break;
                            case "Validé" :
                                $parametre = 2;
                                break;
                            case "Non validé" :
                                $parametre = 3;
                                break;
                            case "En cours de saisie suite à non validation" :
                                $parametre = 4;
                                break;
                            case "Nouvelle transmission en attente de validation" :
                                $parametre = 5;
                                break;
                            case "Non connecté" :
                                $parametre = "6";
                                break;
                            case "Non saisie" :
                                $parametre = 7;
                                break;
                            case "Saisie réinitialisée" :
                                $parametre = 8;
                                break;
                        }
//                        if($parametre == 6){
//                           
//                        }else{
                            $where_left = " enq.fgStat";
//                        }
                        
                        break;
                    case "blTypeColl"  :
                        $where_left = " rtc.lbTypeColl";
                        break;
                    case "blCourtier"  :
                        $where_left = " rc.libelle";
                        break;
                    case "blNbAgenContPerm"  :
                        $where_left = " b.nbAgentContractuelEmploiPermanent";
                        break;
                    case "blNbAgenContNonPerm"  :
                        $where_left = " b.nbAgentContractuelEmploiNonPermament";
                        break;
                    case "blNbAgenPerm"  :
                        $where_left = " b.nbAgentEmploiPermanent";
                        break;
                    case "blNbAgenTitu"  :
                        $where_left = " b.nbAgentTitulaire";
                        break;
                    case "blDepa"  :
                        $where_left = " d.idDepa";
                        break;
                    case "blLibe"  :
                        $where_left = " c.lbColl";
                        break;
                    case "blCdPost"  :
                        $where_left = " c.cdPost";
                        break;
                    case "lbAdre" :
                        $where_left = " c.lbAdre";
                        break;
                    case "blNom" :
                        $where_left = " cc.lbNom";
                        break;
                    case "blTele" :
                        $where_left = " cc.lbTele";
                        break;
                    case "blLbVill"  :
                        $where_left = " c.lbVill";
                        break;
                    case "blCdInse"  :
                        $where_left = " c.cdInse";
                        break;
                    case "blSire"  :
                        $where_left = " c.nmSire";
                        break;
                    case "blNmPopuInse"  :
                        $where_left = " c.nmPopuInse";
                        break;
                    case "blSurclasDemo"  :
                        switch ($parametre){
                            case "Non"  :
                                $parametre = 0;
                            break;
                            case "Non renseigné"  :
                                $parametre = "NULL";
                            break;
                            case "Oui"  :
                                $parametre = 1;
                            break;
                        }

                        $where_left = " c.blSurclasDemo";
                        break;

                     case "blNmStratColl"  :

                        $where_left = " c.nmStratColl";
                        break;

                     case "blAffiCdg"  :

                        $where_left = " c.blAffiColl";
                            switch ($parametre){
                            case "Non"  :
                                $parametre = 0;
                                break;
                            case "Non renseigné"  :
                                $parametre = "NULL";
                                break;
                            case "Oui"  :
                                $parametre = 1;
                                break;
                        }
                        break;

                     case "blCtCdg"  :

                        $where_left = " c.blCtCdg";
                            switch ($parametre){
                            case "Non"  :
                                $parametre = "0";
                                break;
                            case "Non renseigné"  :
                                $parametre = "NULL";
                                break;
                            case "Oui"  :
                                $parametre = "1";
                                break;
                        }
                        break;
                     case "blChsct"  :

                        $where_left = " c.blChsct";
                            switch ($parametre){
                            case "Non"  :
                                $parametre = "0";
                                break;
                            case "Non renseigné"  :
                                $parametre = "NULL";
                                break;
                            case "Oui"  :
                                $parametre = "1";
                                break;
                        }
                        break;
                     case "blCollDgcl"  :

                        $where_left = " c.blCollDgcl";
                            switch ($parametre){
                            case "Non"  :
                                $parametre = "0";
                                break;
                            case "Non renseigné"  :
                                $parametre = "NULL";
                                break;
                            case "Oui"  :
                                $parametre = "1";
                                break;
                        }
                        break;
                     case "cdg_is_authorized_by_collectivity"  :

                        $where_left = " c.cdg_is_authorized_by_collectivity";
                            switch ($parametre){
                            case "Non"  :
                                $parametre = "0";
                                break;
                            case "Non renseigné"  :
                                $parametre = "NULL";
                                break;
                            case "Oui"  :
                                $parametre = "1";
                                break;
                        }
                        break;
                }
                $where_operator = "";
                $parametre = str_replace("'", "''", $parametre);
                $where_value = "'".$parametre."'";
                switch ($condition){
                    case "==" :
                    case "=" :
                        $where_operator = " = ";
                         switch ($parametre){
                            case "1":
                            case "0":
                               $where_operator = " = ";
                                break;
                            case "NULL":
                                $where_operator = " is ";
                                $NewParametre = str_replace('"', "", $parametre);
                                $where_value = $NewParametre;
                                break;
                        }
                        break;
                    case "!=" :
                        $where_operator = " != ";
                        switch ($parametre){
                             case "1":
                             case "0":
                               $where_operator = " != ";
                                break;
                            case "NULL":
                                $where_operator = " is not ";
                                $NewParametre = str_replace('"', "", $parametre);
                                $where_value = $NewParametre;
                            break;

                         }
                         break;
                    case "<" :
                    case ">" :
                    case "<=" :
                    case ">=" :
                        $where_operator = " ".$condition." ";
                        break;
                    case "in" :
                       $where_operator = " LIKE ";
                       $where_value = "'%".$parametre."%'";
                       break;
                    case "^=" :
                       $where_operator = " LIKE ";
                       $where_value = "'".$parametre."%'";
                       break;
                }
                if($parametre == "NULL"){
                    if($where_operator == " IS NOT "){
                        $where = $where_left . " IS NOT NULL ";
                    }else{
                        $where = $where_left . " IS NULL ";
                    }
                }else{
                    if($champ == 'fgStat' && $parametre == '6' && $condition == '=='){
                        $where =  " (u.dtLastconn IS NULL AND b.fgStat != 2 AND b.fgStat != 1 ) OR (u.dtLastconn IS NULL AND b.fgStat IS NULL) ";
                    }elseif($champ == 'fgStat' && $parametre == '6' && $condition == '!=='){
                        $where =  " (u.dtLastconn IS NOT NULL AND b.fgStat != 6 ) OR (u.dtLastconn IS NOT NULL AND b.fgStat IS NULL) ";
                    } else{
                        if ($where_operator == ' != ' && ($parametre == 1 || $parametre == 0)) {
                            $where = $where_left . " " . $where_operator . " :parametre" . $key . " OR " . $where_left . " IS NULL";
                        } else {
                            $where = $where_left . " " . $where_operator . " :parametre" . $key;
                        }
                        $qb->setParameter('parametre' . $key, $parametre);
                    }
                    
                }

                $tab_sql_filtres[$champ] = isset($tab_sql_filtres[$champ]) ? $tab_sql_filtres[$champ] : array();
                array_push($tab_sql_filtres[$champ],$where);
                //$qb->orWhere($where);
            }
            foreach($tab_sql_filtres as $filed_key => $filtre_sql_groupe){
                $filtre_str_sql = "";
                foreach($filtre_sql_groupe as $k => $filtre_sql){
                   $filtre_str_sql .= $k>0 ? ' OR ' : '';
                   $filtre_str_sql .= $filtre_sql;
                }
                $qb->andWhere($filtre_str_sql);
            }
        }
        return $qb;
    }

    public function createQB($select = null,$where = null,$join = null, $order_by = null, $group_by = null,$extra = null){
        $qb = $this->_em->createQueryBuilder();
        $repo_alias = is_array($extra) && isset($extra['repo_alias']) ? $extra['repo_alias'] : $extra;
        $repo_alias = is_string($repo_alias) ? $repo_alias : "current_repo";
        $select_str = is_string($select) ? $select : $repo_alias;
        if(is_array($select)){
            $select_str = "";
            $nb_to_select = count($select);
            foreach ($select as $key => $a_select) {
                if(is_string($a_select)){
                    $temp_select = !preg_match('/.*, {0}$/',$a_select) && $key+1<$nb_to_select ? $a_select.", " : $a_select." ";
                    $select_str .= $temp_select;
                }
            }
        }
        $qb->select($select_str)
            ->from($this->_entityName, $repo_alias);
        if($join!=null){
            $cpt_join = 0;
            foreach ($join as $table => $join_alias) {
                if(is_array($join_alias)){
                    $alias = isset($join_alias['alias']) ? $join_alias['alias'] : "QB_join_alias_".$cpt_join;
                    $join_on_operator = isset($join_alias['operator']) ? $join_alias['operator']: "WITH";
                    $join_on_expression = isset($join_alias['on_expr']) ? $join_alias['on_expr']: null;
                    $join_function = isset($join_alias['function']) ? $join_alias['function']: "join";
                    $join_function = in_array($join_function, array('leftJoin','join')) ? $join_function : "join";
                    if($join_on_expression!=null){
                       $qb->$join_function($table,$alias,$join_on_operator,$join_on_expression);
                   }else{
                       $qb->$join_function($table,$alias);
                   }

                }else{
                    $alias = $join_alias;
                    $qb->join($table,$alias);
                }

            }
        }
        if($where!=null){
            reset($where);
            $first_key = key($where);
            $where = is_int($first_key) ? $where : array($where);
            $cpt_where = 0;
            $cpt_param = 0;
            $offset = -1;
            $group_start_at = 0;
            foreach($where as $key => $where_data) {
                if($key<($group_start_at+$offset)) continue;
                $where_link = isset($where_data['prev_link']) ? strtolower($where_data['prev_link']) : null;
                $where_open_group = isset($where_data['open_group']) ? $where_data['open_group'] : false;
                $where_close_group = isset($where_data['close_group']) ? $where_data['close_group'] : false;
                $where_condition = isset($where_data['condition']) ? $where_data['condition'] : $where_data;
                $where_params = isset($where_data['params']) ? $where_data['params'] : array();
                $where_params = is_array($where_params) ? $where_params : array($where_data['params']);
                $where_function = $key==0 ? 'where' : 'andWhere';
                if($where_link!=null && $key>0){
                    switch ($where_link) {
                        case 'and':
                            $where_function = 'andWhere';
                            break;
                        case 'or':
                            $where_function = 'orWhere';
                            break;
                    }
                }

                if($where_open_group){
                    $group_start_at = $key;
                    $where_condition = $this->makeGroupedWhere($qb,$where,$key,$cpt_param,1,$offset);
                }else{
                    foreach ($where_params as $param_key => $param_value) {
                        if($param_value!==null){
                            $qb->setParameter($cpt_param,$param_value);
                            $cpt_param++;
                        }
                    }
                }
                $qb->$where_function($where_condition);
                $cpt_where++;
            }
        }
        if($order_by!=null){
            $first = true;
            foreach ($order_by as $dql_sort => $order) {
                $order_function = $first ? 'orderBy' : 'addOrderBy';
                $qb->$order_function($dql_sort,$order);
                $first = false;
            }
        }
        if($group_by!=null){
            $first = true;
            foreach ($group_by as $key => $dql_group) {
                $group_function = $first ? 'groupBy' : 'addGroupBy';
                $qb->$group_function($dql_group);
                $first = false;
            }
        }
        return $qb;
    }

    function makeGroupedWhere(&$qb,$where,&$key,&$cpt_param,$depth=1,&$offset=-1){
        if($where!=null){
            $grouped_where = '';
            $offset = -1;
            $cpt_where = 0;
            for ($key;$key<count($where);$key++) {
                if($key<$offset) continue;
                $where_data = $where[$key];
                $where_link = isset($where_data['prev_link']) ? strtolower($where_data['prev_link']) : 'and';
                $where_open_group = isset($where_data['open_group']) ? $where_data['open_group'] : false;
                $where_close_group = isset($where_data['close_group']) ? $where_data['close_group'] : false;
                $where_params = isset($where_data['params']) ? $where_data['params'] : array();
                $where_condition = isset($where_data['condition']) ? $where_data['condition'] : $where_data;
                $where_params = isset($where_data['params']) ? $where_data['params'] : array();
                $where_params = is_array($where_params) ? $where_params : array($where_data['params']);

                if($where_open_group){
                    if($cpt_where == 0){
                        if($depth>1){
                            $grouped_where .= ' '.$where_link.' ';
                        }
                        $grouped_where .= ' (';
                    }else{
                        //$grouped_where .= $this->makeGroupedWhere($qb,$where,$key,$cpt_param,$depth+1);
                    }
                }else if($cpt_where > 0){
                   $grouped_where .= $where_link.' ';
                }
                $grouped_where .= $where_condition;
                foreach ($where_params as $param_key => $param_value) {
                    if($param_value!==null){
                        $qb->setParameter($cpt_param,$param_value);
                        $cpt_param++;
                    }
                }
                $cpt_where++;
                if($where_close_group){
                    $grouped_where .= ') ';
                    break;
                }
            }
            $offset = $cpt_where;
            return $grouped_where;
        }
    }

    public function utf8_encode($data){
        if(is_array($data)){
            array_walk_recursive($data, function(&$v){
                if(is_object($v)){
                    if(method_exists($v, "utf8_encode")){
                        $v = $v->utf8_encode();
                    }
                }else if(!mb_check_encoding($v,"UTF-8")){
                    $v = utf8_encode($v);
                }
            });
        }else if(is_object($data)){
            if(method_exists($data, "utf8_encode")){

                $data = $data->utf8_encode();
            }
        }
        return $data;
    }

    public function unionQbs($qb1,$qb2,$group_by=null){
        $res_1 = $qb1->getQuery()->getResult();
        $res_2 = $qb2->getQuery()->getResult();

        $unioned = array_merge($res_1,$res_2);
        if($group_by!=null){
            $row_group_by_keys = array();
            $grouped = array();
            foreach ($unioned as $key => $to_group){
                $group_by = is_array($group_by) ? $group_by : array($group_by);
                $value_group_by = $to_group;
                foreach ($group_by as $key => $by) {
                    if(is_array($value_group_by)){
                        $value_group_by = $value_group_by[$by];
                    }else{
                        $getter = "get".ucfirst($by);
                        if(method_exists($value_group_by, $getter)){
                            $value_group_by = $value_group_by->$getter();
                        }
                    }
                }
                $row_key = array_search($value_group_by,$row_group_by_keys);
                if($row_key === false){
                    $row_group_by_keys[] = $value_group_by;
                    $grouped[] = $to_group;
                }else{
                    $in_group = $grouped[$row_key];
                    foreach ($in_group as $p_key => $p_value){
                        if(is_numeric($p_value) && $to_group[$p_key]){
                            $in_group[$p_key] += $to_group[$p_key];
                        }
                        $grouped[$row_key] = $in_group;
                    }
                }
           }
           $unioned = $grouped;
        }
        return $this->utf8_encode($unioned);
    }
}

<?php

namespace Bilan_Social\Bundle\ApaBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * BilanSocialAgent Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InformationColectiviteAgentRepository extends EntityRepository {

    public function GetInformationCollectivite($idColl, $idEnqu, $idCamp) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('qc')
                ->from('ApaBundle:InformationColectiviteAgent', 'qc')
                ->leftJoin('EnqueteBundle:Enquete', 'e', 'WITH', 'qc.enquete = e.idEnqu')
                ->where('e.idEnqu = :enquete' )
                ->andWhere('qc.collectivite = :collectivite')
                ->andWhere('e.idCamp = :idCamp')
                ->setParameter('enquete', $idEnqu)
                ->setParameter('collectivite', $idColl)
                ->setParameter('idCamp', $idCamp);

        try {
            $informationCollectivite = $qb->getQuery()->getOneOrNullResult();
            if (empty($informationCollectivite)) {
                return null;
            }
        } catch (NoResultException $e) {

            return null;
        }

        return $informationCollectivite;
    }

    public function GetInformationCollectiviteAgent($idColl, $idEnqu) {

        $qb = $this->_em->createQueryBuilder();

        //error_log('$idEnqu ' . json_encode($idEnqu) , 0);
        //error_log('$idColl ' . json_encode($idColl) , 0);


        $qb->select('i')
                ->from($this->_entityName, 'i')
                ->join('i.enquete', 'e')
                    ->addSelect('e')
                ->join('i.collectivite', 'c')
                    ->addSelect('c')
                ->where('c.idColl = :collect')
                    ->setParameter('collect', $idColl)
                ->andWhere('e.idEnqu = :idEnqu')
                    ->setParameter('idEnqu', $idEnqu)
                ;

        try {
            $agent = $qb->getQuery()->getSingleResult();
        }
        catch (NoResultException $e) {
            return null;
        }

        return $agent;
    }


}

<?php

namespace Bilan_Social\Bundle\CollectiviteBundle\Repository;

/**
 * HistoriqueCollectiviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Bilan_Social\Bundle\CoreBundle\Repository\AbstractRepository;
use Bilan_Social\Bundle\ReferencielBundle\Enums\DroitsEnum;

class HistoriqueCollectiviteRepository extends AbstractRepository
{
    public function getCollUnchanged($utilisateur, $param) {
        $droit = bindec(DroitsEnum::MASK_READ_WRITE_COLLECTIVITE);
        $qb = $this->_em->createQueryBuilder();
        $qb->select('c.lbAdre, c.nmSire, c.lbVill, c.lbColl, d.lbDepa, d.cdDepa')
            ->from('UserBundle:UtilisateurDroits', 'ud')
            ->join('UserBundle:UtilisateurCdg', 'uc', 'WITH', 'ud.utilisateurCdg = uc.idUtilisateurCdg')
            ->join('CollectiviteBundle:CdgDepartement', 'cd', 'WITH', 'ud.cdgDepartement = cd.idCdgDepartement')
            ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'd.idDepa = cd.departement')
            ->join('CollectiviteBundle:HistoriqueCollectivite', 'hc', 'WITH', 'hc.departement = d.idDepa')
            ->join('CollectiviteBundle:Collectivite', 'c', 'WITH', 'hc.collectivite = c.idColl')
            ->where('uc.utilisateur = :idUtilisateur')
            ->andWhere('CONV(:mask, 2, 10, ud.fgDroits) = :droit') //CONV(:mask,2,10)
            ->andWhere('hc.refNatureMAJ = :refNatureMAJ') // recupération des collectivités non presentes
            ->setParameter('mask', DroitsEnum::MASK_READ_WRITE_COLLECTIVITE)
            ->setParameter('idUtilisateur', $utilisateur)
            ->setParameter('refNatureMAJ', 1)
            ->setParameter("droit", $droit);
        return $qb->getQuery()->getArrayResult();
    }

    public function getGenealogy($nmSire){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('c')
            ->from('CollectiviteBundle:HistoriqueCollectivite', 'hc')
            ->join('CollectiviteBundle:Collectivite', 'c', 'WITH', 'c.nmSire = hc.nmAnciSire OR c.nmSire = hc.nmNouvSire')
            ->where('hc.nmNouvSire = :nmSire')
            ->setParameter('nmSire', $nmSire);
        return $qb->getQuery()->getResult();
    }
}

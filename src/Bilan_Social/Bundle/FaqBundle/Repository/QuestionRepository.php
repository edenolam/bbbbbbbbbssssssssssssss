<?php

namespace Bilan_Social\Bundle\FaqBundle\Repository;

use Bilan_Social\Bundle\ReferencielBundle\Enums\DroitsEnum;
/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{

    function getQuestionsEcriture($idUtil) {
        $qb = $this->_em->createQueryBuilder();
        $droit = bindec(DroitsEnum::MASK_READ_WRITE_COLLECTIVITE);
        $qb->select(array('q.id', 'q.createdAt', 'q.updatedAt', 'q.sujet', 'q.blCloturer', 'q.questionRead', 'd.lbDepa', 'c.nmSire', 'c.lbColl'))
                ->from('UserBundle:UtilisateurDroits', 'ud')
                ->join('UserBundle:UtilisateurCdg', 'uc', 'WITH', 'ud.utilisateurCdg = uc.idUtilisateurCdg')
                ->join('CollectiviteBundle:CdgDepartement', 'cd', 'WITH', 'ud.cdgDepartement = cd.idCdgDepartement')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'd.idDepa = cd.departement')
                ->join('CollectiviteBundle:Collectivite', 'c', 'WITH', 'c.departement = d.idDepa')
                ->join($this->_entityName, 'q', 'WITH', 'q.IdColl = c.idColl')
                ->where('uc.utilisateur = :idUtilisateur')
                ->andWhere('CONV(:mask, 2, 10, ud.fgDroits) = :droit')
                ->andWhere('c.blActi = 1')
                ->setParameter('mask', DroitsEnum::MASK_READ_WRITE_COLLECTIVITE)
                ->setParameter('idUtilisateur', $idUtil)
                ->setParameter("droit", $droit);
        try {
            $questions = $qb->getQuery()->getResult();

        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $questions;
    }
    function getQuestionsLecture($idUtil) {
        $qb = $this->_em->createQueryBuilder();
        $droit = bindec(DroitsEnum::MASK_READ_COLLECTIVITE);
        $droit_ecriture = bindec(DroitsEnum::MASK_READ_WRITE_COLLECTIVITE);
        $qb->select(array('q.id', 'q.createdAt', 'q.updatedAt', 'q.sujet', 'q.blCloturer', 'q.questionRead', 'd.lbDepa', 'c.nmSire', 'c.lbColl'))
                ->from('UserBundle:UtilisateurDroits', 'ud')
                ->join('UserBundle:UtilisateurCdg', 'uc', 'WITH', 'ud.utilisateurCdg = uc.idUtilisateurCdg')
                ->join('CollectiviteBundle:CdgDepartement', 'cd', 'WITH', 'ud.cdgDepartement = cd.idCdgDepartement')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'd.idDepa = cd.departement')
                ->join('CollectiviteBundle:Collectivite', 'c', 'WITH', 'c.departement = d.idDepa')
                ->join($this->_entityName, 'q', 'WITH', 'q.IdColl = c.idColl')
                ->where('uc.utilisateur = :idUtilisateur')
                ->andWhere('CONV(:mask, 2, 10, ud.fgDroits) = :droit and CONV(:mask_write, 2, 10, ud.fgDroits) != :droit_ecriture')
                ->andWhere('c.blActi = 1')
                ->setParameter('mask', DroitsEnum::MASK_READ_COLLECTIVITE)
                ->setParameter('mask_write', DroitsEnum::MASK_READ_WRITE_COLLECTIVITE)
                ->setParameter('idUtilisateur', $idUtil)
                ->setParameter("droit", $droit)
                ->setParameter("droit_ecriture", $droit_ecriture);
        try {
            $questions = $qb->getQuery()->getResult();

        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $questions;
    }
    
    function getQuestionsActive($idUtil) {
        $qb = $this->_em->createQueryBuilder();
        $droit = bindec(DroitsEnum::MASK_READ_WRITE_COLLECTIVITE);
        $qb->select(array('q.id', 'q.createdAt', 'q.updatedAt', 'q.sujet', 'q.blCloturer', 'd.lbDepa', 'c.nmSire', 'c.lbColl'))
                ->from('UserBundle:UtilisateurDroits', 'ud')
                ->join('UserBundle:UtilisateurCdg', 'uc', 'WITH', 'ud.utilisateurCdg = uc.idUtilisateurCdg')
                ->join('CollectiviteBundle:CdgDepartement', 'cd', 'WITH', 'ud.cdgDepartement = cd.idCdgDepartement')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'd.idDepa = cd.departement')
                ->join('CollectiviteBundle:Collectivite', 'c', 'WITH', 'c.departement = d.idDepa')
                ->join($this->_entityName, 'q', 'WITH', 'q.IdColl = c.idColl')
                ->where('uc.utilisateur = :idUtilisateur')
                ->andWhere('CONV(:mask, 2, 10, ud.fgDroits) = :droit')
                ->andWhere('c.blActi = 1')
                ->andWhere('q.blCloturer IS NULL')
                ->setParameter('mask', DroitsEnum::MASK_READ_WRITE_COLLECTIVITE)
                ->setParameter('idUtilisateur', $idUtil)
                ->setParameter("droit", $droit);

        try {
            $questions = $qb->getQuery()->getResult();

        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $questions;
    }

      function getNbQuestion($idUtil) {
        $NbQuestion = $this->_em->createQueryBuilder();
        $droit = bindec(DroitsEnum::MASK_READ_WRITE_COLLECTIVITE);
        $NbQuestion->select('count(q)')
                ->from('UserBundle:UtilisateurDroits', 'ud')
                ->join('UserBundle:UtilisateurCdg', 'uc', 'WITH', 'ud.utilisateurCdg = uc.idUtilisateurCdg')
                ->join('CollectiviteBundle:CdgDepartement', 'cd', 'WITH', 'ud.cdgDepartement = cd.idCdgDepartement')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'd.idDepa = cd.departement')
                ->join('CollectiviteBundle:Collectivite', 'c', 'WITH', 'c.departement = d.idDepa')
                ->join($this->_entityName, 'q', 'WITH', 'q.IdColl = c.idColl')
                ->where('uc.utilisateur = :idUtilisateur')
                ->andWhere('CONV(:mask, 2, 10, ud.fgDroits) = :droit')
                ->andWhere('c.blActi = 1')
                ->andWhere('q.blCloturer IS NULL')
                ->setParameter('mask', DroitsEnum::MASK_READ_WRITE_COLLECTIVITE)
                ->setParameter('idUtilisateur', $idUtil)
                ->setParameter("droit", $droit);

        try {
            $Nombredequestion = $NbQuestion->getQuery()->getSingleScalarResult();

        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $Nombredequestion;
    }

    public function isOwnedByCdg($question, $cdg) {
        $is_owned = false;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(q) as isOwned')
            ->from($this->_entityName, 'q')
            ->join('q.IdColl', 'c')
            ->join('c.cdgDepartement', 'cdgDep')
            ->join('cdgDep.cdg', 'cdg')
            ->join('cdg.cdgUtilisateurs', 'UtilCdg')
            ->where('q.id = :question')
            ->andWhere('cdg.idCdg = :cdg')
            ->andWhere('(q.blCloturer = 0 OR q.blCloturer IS NULL)')
            ->setParameter('question', $question)
            ->setParameter('cdg', $cdg);
        try {
            $query = $qb->getQuery();
            $is_owned = $query->getSingleResult();
        }
        catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_owned['isOwned'];
    }

    public function isOwnedByCollUser($question,$util){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(q) as isOwned')
            ->from($this->_entityName, 'q')
            ->join('q.IdColl', 'c')
            ->join('c.utilisateurs', 'u')
            ->where('q.id = :question')
            ->andWhere('u.idUtil = :util')
            ->andWhere('q.blCloturer != 1')
            ->setParameter('question', $question)
            ->setParameter('util', $util);
        try {
            $query = $qb->getQuery();
            $is_owned = $query->getSingleResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_owned['isOwned'];
    }

    public function isOwnedByCollectivite($question,$collectivite){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(q) as isOwned')
            ->from($this->_entityName, 'q')
            ->join('q.IdColl', 'c')
            ->where('q.id = :question')
            ->andWhere('c.IdColl = :collectivite')
            ->andWhere('q.blCloturer != 1')
            ->setParameter('question', $question)
            ->setParameter('collectivite', $collectivite);
        try {
            $query = $qb->getQuery();
            $is_owned = $query->getSingleResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_owned['isOwned'];
    }
}

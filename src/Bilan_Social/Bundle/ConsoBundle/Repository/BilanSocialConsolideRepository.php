<?php

namespace Bilan_Social\Bundle\ConsoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\Common\Collections\ArrayCollection;
use Bilan_Social\Bundle\ConsoBundle\Entity\BilanSocialConsolide;
/**
 * SocialRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BilanSocialConsolideRepository extends EntityRepository {

    private $config_delta_annee; 
    private $table_alias;
    public function __construct($em,$metaData){
        parent::__construct($em,$metaData);
        $this->table_alias = "b";
        $table_alias=$this->table_alias;
        $this->config_delta_annee = array(
            'full_select_current'=>array(
                $table_alias,"enquete","collectivite","idBilasocicons","questionCollectiviteConsolide","ind1101s","ind1102s","ind1103s","ind111s","ind112s","ind113s","ind114s","ind121s","ind122s",
                "ind123s","ind124s","ind1311s","ind1312s","ind132s","ind141s","ind142s","ind143s","ind144s","ind1501s","ind1502s","ind1511s","ind1512s","ind1513s",
                "ind152s","ind1531s","ind1532s","ind154s","ind155s","ind156s","ind158s","ind161s","ind1612s","ind171s","ind2111s","ind2112s","ind2113s","ind221s",
                "ind222s","ind2121s","ind2122s","ind2123s","ind2131s","ind2132s","ind2133s","ind214s","ind2231s","ind2232s","ind2233s","ind224s",
                "ind231s","ind411s","ind412s","ind421s","ind422s","ind423s","ind423sFili","ind424s","ind431s","ind311s","ind321s","ind331s","ind343s","ind5111s",
                "ind5112s","ind5113s","ind5121s","ind5122s","ind513s","ind613s","ind7141s","ind7142s","bscRassctAccidentTravails","bscRassctInformationCollectivite",
                "bscRassctRealisationFormationSanteTravails","bscRassctPrevisionFormationSanteTravails","bscRassctAutresMesures","bscRassctPredictionsAutresMesures",
                "bscRassctNbMaladiePros","bscRassctNbAccidentTravails","bscRassctNatureLesions","bscRassctSiegeLesions","bscRassctElementMateriels","bscRassctMaladieProCaracPros",
                "bscGpeecNbAgentsTituEmpPermaParFoncEtAges","bscGpeecNiveauDiplomes","bscGpeecPlusNbAgentsParSpeEtAges","bscHanditorialQuestionsGenerales","bscHanditorialInaptitudeEtReclassement","bscHanditorialInaptEtReclaCadreEmplois","bscHanditorialInaptEtReclaMetiers","bscHanditorialInaptEtReclaTempsComplets",
                "bscHanditorialQuestionsBoeths","bscHanditorialNatureHandicaps","bscHanditorialAvisInaptitudes","bscHanditorialMesureInaptitudes","bscHanditorialAvisInaptitudesAvant",
                "bscHanditorialMesureInaptitudesAvant","bscHanditorialAncienneteAgents","bscHanditorialModeEntrees","bscHanditorialStatutAgents","bscHanditorialArticles",
                "bscHanditorialModeSortiesTitulaire","bscHanditorialModeSortiesNonTitulaire","bscHanditorialDerniersDiplomes","bscHanditorialCadreEmplois","bscHanditorialMetiers",
                "bscHanditorialTempsComplets","bscHanditorialTempsPleins","bscDgclJoursCarenceTitulaires","bscDgclJoursCarenceContractuels","ind6141s","ind6142s","incoherenceLogs",
                "BilanSocialAgent","q132","q161","r16211","r16212","r16213","r16214","r16221","r16222","r16223","r2101","r2102","q2151","q2152","q224","q225","q3411",
                "q3412","r3411","r3412","q3421","q3422","q3423","r342","q343","r3441","r3442","r3443","r4131","r4132","q414","r4141","r4142","q415","q4161","q4162","q4163",
                "q417","q421","r421","q422","q4311","q4312","q4313","r5141","r5142","r5143","r5144","r6111","r6112","q6113","r6113","q6114","r6114","r6121","r6122","r6123","r6124",
                "r6125","r6126","q613","q7111","q7112","q712","q7131","q7132","q7133","qS7141","qS7142","qP7143","qP7144","r71411HC","r71412HC","r71421HC","r71422HC",
                "qHandiB22","qHandiB23","qHandiB41A","qHandiB41B","fgStat","blVali","dtCrea","cdUtilcrea","dtModi","cdUtilmodi","blIncoEff","blIncoInd110","moyenneInd110",
                "blIncoInd111","moyenneInd111","blIncoInd112","moyenneInd112","blIncoInd113","moyenneInd113","blIncoInd114","moyenneInd114","blIncoInd121",
                "moyenneInd121","blIncoInd122","moyenneInd122","blIncoInd123","moyenneInd123","blIncoInd124","moyenneInd124","blIncoInd131","moyenneInd131",
                "blIncoInd132","moyenneInd132","blIncoInd140","moyenneInd140","blIncoTpsTrav","blIncoInd210","moyenneInd210","blIncoInd211","moyenneInd211",
                "blIncoInd212","moyenneInd212","blIncoInd213","moyenneInd213","blIncoInd214","moyenneInd214","blIncoInd215","moyenneInd215","blIncoInd216","moyenneInd216","blIncoInd217","moyenneInd217","blIncoInd221",
                "moyenneInd221","blIncoInd222","moyenneInd222","blIncoInd223","moyenneInd223","blIncoInd224","moyenneInd224","blIncoInd225","moyenneInd225",
                "blIncoInd231","moyenneInd231","blIncoMouv","blIncoInd150","moyenneInd150","blIncoInd151","moyenneInd151","blIncoInd152","moyenneInd152",
                "blIncoInd1531","moyenneInd1531","blIncoInd1532","moyenneInd1532","blIncoInd154","moyenneInd154","blIncoInd155","moyenneInd155","blIncoInd156",
                "moyenneInd156","blIncoInd157","moyenneInd157","blIncoInd158","moyenneInd158","blIncoInd161","moyenneInd161","blIncoInd162","moyenneInd162","blIncoInd171","moyenneInd171",
                "blIncoConditions","blIncoInd411","moyenneInd411","blIncoInd413","moyenneInd413","blIncoInd414","moyenneInd414","blIncoInd421","moyenneInd421",
                "blIncoInd422","moyenneInd422","blIncoInd423","moyenneInd423","blIncoInd424","moyenneInd424","blIncoInd431","moyenneInd431","blIncoRemuneration",
                "blIncoInd311","moyenneInd311","blIncoInd321","moyenneInd321","blIncoInd331","moyenneInd331","blIncoInd341","moyenneInd341","blIncoInd342",
                "moyenneInd342","blIncoInd343","moyenneInd343","blIncoInd344","moyenneInd344","blIncoFormation","blIncoInd5111","moyenneInd5111","blIncoInd5112",
                "moyenneInd5112","blIncoInd5113","moyenneInd5113","blIncoInd512","moyenneInd512","blIncoInd513","moyenneInd513","blIncoInd514","moyenneInd514",
                "blIncoDroit","blIncoInd611","moyenneInd611","blIncoInd612","moyenneInd612","blIncoInd613","moyenneInd613","blIncoInd614","moyenneInd614",
                "blIncoInd711","moyenneInd711","blIncoInd712","moyenneInd712","blIncoInd713","moyenneInd713","blIncoInd714","moyenneInd714","blIncoRassct",
                "blIncoRassctAccidentTravail","moyenneRassctAccidentTravail","blIncoRassctRealisationFormationSanteTravail","moyenneRassctRealisationFormationSanteTravail",
                "blIncoRassctAutresMesures","moyenneRassctAutresMesures","blIncoRassctPrevisionFormationSanteTravail","moyenneRassctPrevisionFormationSanteTravail",
                "blIncoRassctPredictionsAutresMesures","moyenneRassctPredictionsAutresMesures","blIncoRassctNbMaladiePro","moyenneRassctNbMaladiePro","blIncoRassctNbAccidentTravail",
                "moyenneRassctNbAccidentTravail","blIncoRassctNatureLesion","moyenneRassctNatureLesion","blIncoRassctSiegeLesion","moyenneRassctSiegeLesion",
                "blIncoRassctElementMateriel","moyenneRassctElementMateriel","blIncoRassctMaladieProCaracPro","moyenneRassctMaladieProCaracPro","blIncoRassctInformationCollectivite",
                "moyenneRassctInformationCollectivite","blIncoGpeec","blIncoGpeecNbAgentsTituEmpPermaParFoncEtAge","moyenneGpeecNbAgentsTituEmpPermaParFoncEtAge",
                "blIncoGpeecPlusNbAgentsParSpeEtAge","moyenneGpeecPlusNbAgentsParSpeEtAge","blIncoGpeecNiveauDiplome","moyenneGpeecNiveauDiplome","blIncoHanditorial",
                "blIncoHanditorialQuestionsGenerales","moyenneHanditorialQuestionsGenerales","blIncoHanditorialInaptitudeEtReclassement","moyenneHanditorialInaptitudeEtReclassement","blIncoHanditorialQuestionsBoeths","moyenneHanditorialQuestionsBoeths",
                "blIncoHanditorialNatureHandicaps","moyenneHanditorialNatureHandicaps","blIncoHanditorialAvisInaptitudes","moyenneHanditorialAvisInaptitudes",
                "blIncoHanditorialCadreEmplois","moyenneHanditorialCadreEmplois","blIncoHanditorialMetiers","moyenneHanditorialMetiers","blIncoHanditorialTempsComplets","moyenneHanditorialTempsComplets",
                "blIncoHanditorialInaptEtReclaCadreEmplois","moyenneHanditorialInaptEtReclaCadreEmplois","blIncoHanditorialInaptEtReclaMetiers","moyenneHanditorialInaptEtReclaMetiers","blIncoHanditorialInaptEtReclaTempsComplets",
                "moyenneHanditorialInaptEtReclaTempsComplets",
                "blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence","nbAgentContractuelEmploiPermanent",
                "nbAgentContractuelEmploiNonPermament","nbAgentEmploiPermanent","nbAgentTitulaire"
            ),
            'annees_diff'=>array(
                array(
                    'annee'=>2018,
                    'to_remove'=>array("blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence",$table_alias)
                ),
                array(
                    'annee'=>2017,
                    'to_remove'=>array("blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence",$table_alias,"blIncoHanditorialInaptitudeEtReclassement","moyenneHanditorialInaptitudeEtReclassement","blIncoHanditorialAvisInaptitudes","moyenneHanditorialAvisInaptitudes","bscHanditorialInaptitudeEtReclassement","bscHanditorialAvisInaptitudes","bscHanditorialMesureInaptitudes","bscHanditorialAvisInaptitudesAvant", "bscHanditorialMesureInaptitudesAvant","blIncoHanditorialInaptEtReclaCadreEmplois","moyenneHanditorialInaptEtReclaCadreEmplois","blIncoHanditorialInaptEtReclaMetiers","moyenneHanditorialInaptEtReclaMetiers","blIncoHanditorialInaptEtReclaTempsComplets",
                "moyenneHanditorialInaptEtReclaTempsComplets","bscHanditorialInaptEtReclaCadreEmplois","bscHanditorialInaptEtReclaMetiers","bscHanditorialInaptEtReclaTempsComplets")
                ),
                array(
                    'annee'=>2016,
                    'to_remove'=>array("blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence",$table_alias,"blIncoHanditorialInaptitudeEtReclassement","moyenneHanditorialInaptitudeEtReclassement","blIncoHanditorialAvisInaptitudes","moyenneHanditorialAvisInaptitudes","bscHanditorialInaptitudeEtReclassement","bscHanditorialAvisInaptitudes","bscHanditorialMesureInaptitudes","bscHanditorialAvisInaptitudesAvant", "bscHanditorialMesureInaptitudesAvant","blIncoHanditorialInaptEtReclaCadreEmplois","moyenneHanditorialInaptEtReclaCadreEmplois","blIncoHanditorialInaptEtReclaMetiers","moyenneHanditorialInaptEtReclaMetiers","blIncoHanditorialInaptEtReclaTempsComplets",
                "moyenneHanditorialInaptEtReclaTempsComplets","bscHanditorialInaptEtReclaCadreEmplois","bscHanditorialInaptEtReclaMetiers","bscHanditorialInaptEtReclaTempsComplets")
                ),
            ),
            'simple_identity'=>array(
                "enquete","collectivite","questionCollectiviteConsolide",
            ),
            'member_of'=>array(
                "ind1101s","ind1102s","ind1103s","ind111s","ind112s","ind113s","ind114s","ind121s","ind122s",
                "ind123s","ind124s","ind1311s","ind1312s","ind132s","ind141s","ind142s","ind143s","ind144s","ind1501s","ind1502s","ind1511s","ind1512s","ind1513s",
                "ind152s","ind1531s","ind1532s","ind154s","ind155s","ind156s","ind158s","ind161s","ind1612s","ind171s","ind2111s","ind2112s","ind2113s","ind221s",
                "ind222s","ind2121s","ind2122s","ind2123s","ind2131s","ind2132s","ind2133s","ind214s","ind2231s","ind2232s","ind2233s","ind224s",
                "ind231s","ind411s","ind412s","ind421s","ind422s","ind423s","ind423sFili","ind424s","ind431s","ind311s","ind321s","ind331s","ind343s","ind5111s",
                "ind5112s","ind5113s","ind5121s","ind5122s","ind513s","ind613s","ind7141s","ind7142s","bscRassctAccidentTravails","bscRassctInformationCollectivite",
                "bscRassctRealisationFormationSanteTravails","bscRassctPrevisionFormationSanteTravails","bscRassctAutresMesures","bscRassctPredictionsAutresMesures",
                "bscRassctNbMaladiePros","bscRassctNbAccidentTravails","bscRassctNatureLesions","bscRassctSiegeLesions","bscRassctElementMateriels","bscRassctMaladieProCaracPros",
                "bscGpeecNbAgentsTituEmpPermaParFoncEtAges","bscGpeecNiveauDiplomes","bscGpeecPlusNbAgentsParSpeEtAges","bscHanditorialQuestionsGenerales", "bscHanditorialInaptitudeEtReclassement",
                "bscHanditorialQuestionsBoeths","bscHanditorialNatureHandicaps","bscHanditorialAvisInaptitudes","bscHanditorialMesureInaptitudes","bscHanditorialAvisInaptitudesAvant",
                "bscHanditorialMesureInaptitudesAvant","bscHanditorialAncienneteAgents","bscHanditorialModeEntrees","bscHanditorialStatutAgents","bscHanditorialArticles",
                "bscHanditorialModeSortiesTitulaire","bscHanditorialModeSortiesNonTitulaire","bscHanditorialDerniersDiplomes","bscHanditorialCadreEmplois","bscHanditorialMetiers","bscHanditorialTempsComplets",
                "bscHanditorialInaptEtReclaCadreEmplois","bscHanditorialInaptEtReclaMetiers","bscHanditorialInaptEtReclaTempsComplets",
                "bscHanditorialTempsPleins","bscDgclJoursCarenceTitulaires","bscDgclJoursCarenceContractuels","ind6141s","ind6142s","incoherenceLogs",
                "BilanSocialAgent",
            ),
            'member_of_entity'=>array(
                "ind1101s"=>"ConsoBundle:Ind1101"
                ,"ind1102s"=>"ConsoBundle:Ind1102"
                ,"ind1103s"=>"ConsoBundle:Ind1103"
                ,"ind111s"=>"ConsoBundle:Ind111"
                ,"ind112s"=>"ConsoBundle:Ind112"
                ,"ind113s"=>"ConsoBundle:Ind113"
                ,"ind114s"=>"ConsoBundle:Ind114"
                ,"ind121s"=>"ConsoBundle:Ind121"
                ,"ind122s"=>"ConsoBundle:Ind122"
                ,"ind123s"=>"ConsoBundle:Ind123"
                ,"ind124s"=>"ConsoBundle:Ind124"
                ,"ind1311s"=>"ConsoBundle:Ind1311"
                ,"ind1312s"=>"ConsoBundle:Ind1312"
                ,"ind132s"=>"ConsoBundle:Ind132"
                ,"ind141s"=>"ConsoBundle:Ind141"
                ,"ind142s"=>"ConsoBundle:Ind142"
                ,"ind143s"=>"ConsoBundle:Ind143"
                ,"ind144s"=>"ConsoBundle:Ind144"
                ,"ind1501s"=>"ConsoBundle:Ind1501"
                ,"ind1502s"=>"ConsoBundle:Ind1502"
                ,"ind1511s"=>"ConsoBundle:Ind1511"
                ,"ind1512s"=>"ConsoBundle:Ind1512"
                ,"ind1513s"=>"ConsoBundle:Ind1513"
                ,"ind152s"=>"ConsoBundle:Ind152"
                ,"ind1531s"=>"ConsoBundle:Ind1531"
                ,"ind1532s"=>"ConsoBundle:Ind1532"
                ,"ind154s"=>"ConsoBundle:Ind154"
                ,"ind155s"=>"ConsoBundle:Ind155"
                ,"ind156s"=>"ConsoBundle:Ind156"
                ,"ind158s"=>"ConsoBundle:Ind158"
                ,"ind161s"=>"ConsoBundle:Ind161"
                ,"ind1612s"=>"ConsoBundle:Ind1612"
                ,"ind171s"=>"ConsoBundle:Ind171"
                ,"ind2111s"=>"ConsoBundle:Ind2111"
                ,"ind2112s"=>"ConsoBundle:Ind2112"
                ,"ind2113s"=>"ConsoBundle:Ind2113"
                ,"ind221s"=>"ConsoBundle:Ind221"
                ,"ind222s"=>"ConsoBundle:Ind222"
                ,"ind2121s"=>"ConsoBundle:Ind2121"
                ,"ind2122s"=>"ConsoBundle:Ind2122"
                ,"ind2123s"=>"ConsoBundle:Ind2123"
                ,"ind2131s"=>"ConsoBundle:Ind2131"
                ,"ind2132s"=>"ConsoBundle:Ind2132"
                ,"ind2133s"=>"ConsoBundle:Ind2133"
                ,"ind214s"=>"ConsoBundle:Ind214"
                ,"ind2231s"=>"ConsoBundle:Ind2231"
                ,"ind2232s"=>"ConsoBundle:Ind2232"
                ,"ind2233s"=>"ConsoBundle:Ind2233"
                ,"ind224s"=>"ConsoBundle:Ind224"
                ,"ind231s"=>"ConsoBundle:Ind231"
                ,"ind411s"=>"ConsoBundle:Ind411"
                ,"ind412s"=>"ConsoBundle:Ind412"
                ,"ind421s"=>"ConsoBundle:Ind421"
                ,"ind422s"=>"ConsoBundle:Ind422"
                ,"ind423s"=>"ConsoBundle:Ind423"
                ,"ind423sFili"=> "ConsoBundle:Ind423"
                ,"ind424s"=>"ConsoBundle:Ind424"
                ,"ind431s"=>"ConsoBundle:Ind431"
                ,"ind311s"=>"ConsoBundle:Ind311"
                ,"ind321s"=>"ConsoBundle:Ind321"
                ,"ind331s"=>"ConsoBundle:Ind331"
                ,"ind343s"=>"ConsoBundle:Ind343"
                ,"ind5111s"=>"ConsoBundle:Ind5111"
                ,"ind5112s"=>"ConsoBundle:Ind5112"
                ,"ind5113s"=>"ConsoBundle:Ind5113"
                ,"ind5121s"=>"ConsoBundle:Ind5121"
                ,"ind5122s"=>"ConsoBundle:Ind5122"
                ,"ind513s"=>"ConsoBundle:Ind513"
                ,"ind613s"=>"ConsoBundle:Ind613"
                ,"ind7141s"=>"ConsoBundle:Ind7141"
                ,"ind7142s"=>"ConsoBundle:Ind7142"
                ,"bscRassctAccidentTravails"=>"ConsoBundle:BscRassctAccidentTravail"
                ,"bscRassctInformationCollectivite"=>"ConsoBundle:BscRassctInformationCollectivite"
                ,"bscRassctRealisationFormationSanteTravails"=>"ConsoBundle:BscRassctRealisationFormationSanteTravail"
                ,"bscRassctPrevisionFormationSanteTravails"=>"ConsoBundle:BscRassctPrevisionFormationSanteTravail"
                ,"bscRassctAutresMesures"=>"ConsoBundle:BscRassctAutresMesures"
                ,"bscRassctPredictionsAutresMesures"=>"ConsoBundle:BscRassctPredictionsAutresMesures"
                ,"bscRassctNbMaladiePros"=>"ConsoBundle:BscRassctNbMaladiePro"
                ,"bscRassctNbAccidentTravails"=>"ConsoBundle:BscRassctNbAccidentTravail"
                ,"bscRassctNatureLesions"=>"ConsoBundle:BscRassctNatureLesion"
                ,"bscRassctSiegeLesions"=>"ConsoBundle:BscRassctSiegeLesion"
                ,"bscRassctElementMateriels"=>"ConsoBundle:BscRassctElementMateriel"
                ,"bscRassctMaladieProCaracPros"=>"ConsoBundle:BscRassctMaladieProCaracPro"
                ,"bscGpeecNbAgentsTituEmpPermaParFoncEtAges"=>"ConsoBundle:BscGpeecNbAgentsTituEmpPermaParFoncEtAge"
                ,"bscGpeecNiveauDiplomes"=>"ConsoBundle:BscGpeecNiveauDiplome"
                ,"bscGpeecPlusNbAgentsParSpeEtAges"=>"ConsoBundle:BscGpeecPlusNbAgentsParSpeEtAge"
                ,"bscHanditorialQuestionsGenerales"=>"ConsoBundle:BscHanditorialQuestionsGenerales"
                ,"bscHanditorialInaptitudeEtReclassement"=>"ConsoBundle:BscHanditorialInaptitudeEtReclassement"
                ,"bscHanditorialQuestionsBoeths"=>"ConsoBundle:BscHanditorialQuestionsBoeths"
                ,"bscHanditorialNatureHandicaps"=>"ConsoBundle:BscHanditorialNatureHandicaps"
                ,"bscHanditorialAvisInaptitudes"=>"ConsoBundle:BscHanditorialAvisInaptitudes"
                ,"bscHanditorialMesureInaptitudes"=>"ConsoBundle:BscHanditorialMesureInaptitudes"
                ,"bscHanditorialAvisInaptitudesAvant"=>"ConsoBundle:BscHanditorialAvisInaptitudesAvant"
                ,"bscHanditorialMesureInaptitudesAvant"=>"ConsoBundle:BscHanditorialMesureInaptitudesAvant"
                ,"bscHanditorialAncienneteAgents"=>"ConsoBundle:BscHanditorialAncienneteAgents"
                ,"bscHanditorialModeEntrees"=>"ConsoBundle:BscHanditorialModeEntrees"
                ,"bscHanditorialStatutAgents"=>"ConsoBundle:BscHanditorialStatutAgents"
                ,"bscHanditorialArticles"=>"ConsoBundle:BscHanditorialArticles"
                ,"bscHanditorialModeSortiesTitulaire"=>"ConsoBundle:BscHanditorialModeSortiesTitulaire"
                ,"bscHanditorialModeSortiesNonTitulaire"=>"ConsoBundle:BscHanditorialModeSortiesNonTitulaire"
                ,"bscHanditorialDerniersDiplomes"=>"ConsoBundle:BscHanditorialDerniersDiplomes"
                ,"bscHanditorialCadreEmplois"=>"ConsoBundle:BscHanditorialCadreEmplois"
                ,"bscHanditorialInaptEtReclaCadreEmplois"=>"ConsoBundle:BscHanditorialInaptEtReclaCadreEmplois"
                ,"bscHanditorialMetiers"=>"ConsoBundle:BscHanditorialMetiers"
                ,"bscHanditorialInaptEtReclaMetiers"=>"ConsoBundle:BscHanditorialInaptEtReclaMetiers"
                ,"bscHanditorialTempsComplets"=>"ConsoBundle:BscHanditorialTempsComplets"
                ,"bscHanditorialInaptEtReclaTempsComplets"=>"ConsoBundle:BscHanditorialInaptEtReclaTempsComplets"
                ,"bscHanditorialTempsPleins"=>"ConsoBundle:BscHanditorialTempsPleins"
                ,"bscDgclJoursCarenceTitulaires"=>"ConsoBundle:BscDgclJoursCarenceTitulaire"
                ,"bscDgclJoursCarenceContractuels"=>"ConsoBundle:BscDgclJoursCarenceContractuel"
                ,"ind6141s"=>"ConsoBundle:Ind6141"
                ,"ind6142s"=>"ConsoBundle:Ind6142"
                ,"incoherenceLogs"=>null
            )
        );
    }

    private $cached_config = array();

    private function getCacheStore(){
        return $this->cached_config;
    }
    private function toCacheKey($to_key){
        if(is_array($to_key)){
            return implode('',$to_key);
        }else{
            return $to_key;
        }
    }
    private function setToCache($key,$value){
        $this->getCacheStore()[$key] = $value;
    }
    private function hasCachedValue($key){
        $cache_store = $this->getCacheStore();
        return isset($cache_store[$key]);
    }
    private function getFromCache($key){
        return $this->getCacheStore()[$key];
    }

    public function getConfigDeltaAnnee($sub_config=null,$default=null,$config_root=null){
        $config = $config_root!=null ? $config_root : $this->config_delta_annee;
        if($sub_config!=null){
            $sub_config = is_array($sub_config) ? $sub_config : array($sub_config);
            $sub_key = array_shift($sub_config);
            $config = isset($config[$sub_key]) ? $config[$sub_key] : $default;
            if($config!==null && count($sub_config)>0){
                if(is_array($config)){
                    $config = $this->getConfigDeltaAnnee($sub_config,$default,$config);
                }else{
                    $config = $default;
                }
            }
        }
        return $config;
    }
    public function makeSelectDiffAnnee($annee=null,
        $table_alias = 'b'){
        /*$config_delta_annee = array(
            'full_select_current'=>array(
                $table_alias,"enquete","collectivite","idBilasocicons","questionCollectiviteConsolide","ind1101s","ind1102s","ind1103s","ind111s","ind112s","ind113s","ind114s","ind121s","ind122s",
                "ind123s","ind124s","ind1311s","ind1312s","ind132s","ind141s","ind142s","ind143s","ind144s","ind1501s","ind1502s","ind1511s","ind1512s","ind1513s",
                "ind152s","ind1531s","ind1532s","ind154s","ind155s","ind156s","ind158s","ind161s","ind1612s","ind171s","ind2111s","ind2112s","ind2113s","ind221s",
                "ind222s","ind2121s","ind2122s","ind2123s","ind2131s","ind2132s","ind2133s","ind214s","ind2151s","ind2152s","ind2231s","ind2232s","ind2233s","ind224s",
                "ind231s","ind411s","ind412s","ind421s","ind422s","ind423s","ind423sFili","ind424s","ind431s","ind311s","ind321s","ind331s","ind343s","ind5111s",
                "ind5112s","ind5113s","ind5121s","ind5122s","ind513s","ind613s","ind7141s","ind7142s","bscRassctAccidentTravails","bscRassctInformationCollectivite",
                "bscRassctRealisationFormationSanteTravails","bscRassctPrevisionFormationSanteTravails","bscRassctAutresMesures","bscRassctPredictionsAutresMesures",
                "bscRassctNbMaladiePros","bscRassctNbAccidentTravails","bscRassctNatureLesions","bscRassctSiegeLesions","bscRassctElementMateriels","bscRassctMaladieProCaracPros",
                "bscGpeecNbAgentsTituEmpPermaParFoncEtAges","bscGpeecNiveauDiplomes","bscGpeecPlusNbAgentsParSpeEtAges","bscHanditorialQuestionsGenerales",
                "bscHanditorialQuestionsBoeths","bscHanditorialNatureHandicaps","bscHanditorialAvisInaptitudes","bscHanditorialMesureInaptitudes","bscHanditorialAvisInaptitudesAvant",
                "bscHanditorialMesureInaptitudesAvant","bscHanditorialAncienneteAgents","bscHanditorialModeEntrees","bscHanditorialStatutAgents","bscHanditorialArticles",
                "bscHanditorialModeSortiesTitulaire","bscHanditorialModeSortiesNonTitulaire","bscHanditorialDerniersDiplomes","bscHanditorialCadreEmplois","bscHanditorialMetiers",
                "bscHanditorialTempsComplets","bscHanditorialTempsPleins","bscDgclJoursCarenceTitulaires","bscDgclJoursCarenceContractuels","ind6141s","ind6142s","incoherenceLogs",
                "BilanSocialAgent","q132","q161","r16211","r16212","r16213","r16214","r16221","r16222","r16223","r2101","r2102","q2151","q2152","q224","q225","q3411",
                "q3412","r3411","r3412","q3421","q3422","q3423","r342","q343","r3441","r3442","r3443","r4131","q414","r4141","r4142","q415","q4161","q4162","q4163",
                "q417","q421","r421","q422","q4311","r5141","r5142","r5143","r5144","r6111","r6112","q6113","r6113","q6114","r6114","r6121","r6122","r6123","r6124",
                "r6125","r6126","q613","q7111","q7112","q712","q7131","q7132","q7133","qS7141","qS7142","qP7143","qP7144","r71411HC","r71412HC","r71421HC","r71422HC",
                "qHandiB22","qHandiB23","qHandiB41A","qHandiB41B","fgStat","blVali","dtCrea","cdUtilcrea","dtModi","cdUtilmodi","blIncoEff","blIncoInd110","moyenneInd110",
                "blIncoInd111","moyenneInd111","blIncoInd112","moyenneInd112","blIncoInd113","moyenneInd113","blIncoInd114","moyenneInd114","blIncoInd121",
                "moyenneInd121","blIncoInd122","moyenneInd122","blIncoInd123","moyenneInd123","blIncoInd124","moyenneInd124","blIncoInd131","moyenneInd131",
                "blIncoInd132","moyenneInd132","blIncoInd140","moyenneInd140","blIncoTpsTrav","blIncoInd210","moyenneInd210","blIncoInd211","moyenneInd211",
                "blIncoInd212","moyenneInd212","blIncoInd213","moyenneInd213","blIncoInd214","moyenneInd214","blIncoInd215","moyenneInd215","blIncoInd221",
                "moyenneInd221","blIncoInd222","moyenneInd222","blIncoInd223","moyenneInd223","blIncoInd224","moyenneInd224","blIncoInd225","moyenneInd225",
                "blIncoInd231","moyenneInd231","blIncoMouv","blIncoInd150","moyenneInd150","blIncoInd151","moyenneInd151","blIncoInd152","moyenneInd152",
                "blIncoInd1531","moyenneInd1531","blIncoInd1532","moyenneInd1532","blIncoInd154","moyenneInd154","blIncoInd155","moyenneInd155","blIncoInd156",
                "moyenneInd156","blIncoInd158","moyenneInd158","blIncoInd161","moyenneInd161","blIncoInd162","moyenneInd162","blIncoInd171","moyenneInd171",
                "blIncoConditions","blIncoInd411","moyenneInd411","blIncoInd413","moyenneInd413","blIncoInd414","moyenneInd414","blIncoInd421","moyenneInd421",
                "blIncoInd422","moyenneInd422","blIncoInd423","moyenneInd423","blIncoInd424","moyenneInd424","blIncoInd431","moyenneInd431","blIncoRemuneration",
                "blIncoInd311","moyenneInd311","blIncoInd321","moyenneInd321","blIncoInd331","moyenneInd331","blIncoInd341","moyenneInd341","blIncoInd342",
                "moyenneInd342","blIncoInd343","moyenneInd343","blIncoInd344","moyenneInd344","blIncoFormation","blIncoInd5111","moyenneInd5111","blIncoInd5112",
                "moyenneInd5112","blIncoInd5113","moyenneInd5113","blIncoInd512","moyenneInd512","blIncoInd513","moyenneInd513","blIncoInd514","moyenneInd514",
                "blIncoDroit","blIncoInd611","moyenneInd611","blIncoInd612","moyenneInd612","blIncoInd613","moyenneInd613","blIncoInd614","moyenneInd614",
                "blIncoInd711","moyenneInd711","blIncoInd712","moyenneInd712","blIncoInd713","moyenneInd713","blIncoInd714","moyenneInd714","blIncoRassct",
                "blIncoRassctAccidentTravail","moyenneRassctAccidentTravail","blIncoRassctRealisationFormationSanteTravail","moyenneRassctRealisationFormationSanteTravail",
                "blIncoRassctAutresMesures","moyenneRassctAutresMesures","blIncoRassctPrevisionFormationSanteTravail","moyenneRassctPrevisionFormationSanteTravail",
                "blIncoRassctPredictionsAutresMesures","moyenneRassctPredictionsAutresMesures","blIncoRassctNbMaladiePro","moyenneRassctNbMaladiePro","blIncoRassctNbAccidentTravail",
                "moyenneRassctNbAccidentTravail","blIncoRassctNatureLesion","moyenneRassctNatureLesion","blIncoRassctSiegeLesion","moyenneRassctSiegeLesion",
                "blIncoRassctElementMateriel","moyenneRassctElementMateriel","blIncoRassctMaladieProCaracPro","moyenneRassctMaladieProCaracPro","blIncoRassctInformationCollectivite",
                "moyenneRassctInformationCollectivite","blIncoGpeec","blIncoGpeecNbAgentsTituEmpPermaParFoncEtAge","moyenneGpeecNbAgentsTituEmpPermaParFoncEtAge",
                "blIncoGpeecPlusNbAgentsParSpeEtAge","moyenneGpeecPlusNbAgentsParSpeEtAge","blIncoGpeecNiveauDiplome","moyenneGpeecNiveauDiplome","blIncoHanditorial",
                "blIncoHanditorialQuestionsGenerales","moyenneHanditorialQuestionsGenerales","blIncoHanditorialQuestionsBoeths","moyenneHanditorialQuestionsBoeths",
                "blIncoHanditorialNatureHandicaps","moyenneHanditorialNatureHandicaps","blIncoHanditorialAvisInaptitudes","moyenneHanditorialAvisInaptitudes",
                "blIncoHanditorialCadreEmplois","moyenneHanditorialCadreEmplois","blIncoHanditorialMetiers","moyenneHanditorialMetiers","blIncoHanditorialTempsComplets",
                "moyenneHanditorialTempsComplets","blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence","nbAgentContractuelEmploiPermanent",
                "nbAgentContractuelEmploiNonPermament","nbAgentEmploiPermanent","nbAgentTitulaire"
            ),
            'annees_diff'=>array(
                array(
                    'annee'=>2018,
                    'to_remove'=>array("blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence",$table_alias)
                ),
                array(
                    'annee'=>2017,
                    'to_remove'=>array("blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence",$table_alias)
                ),
                array(
                    'annee'=>2016,
                    'to_remove'=>array("blIncoDgcl","blIncoDgclJoursCarence","moyenneDgclJoursCarence",$table_alias)
                ),
            ),
            'simple_identity'=>array(
                "enquete","collectivite","questionCollectiviteConsolide",
            ),
            'member_of'=>array(
                "ind1101s","ind1102s","ind1103s","ind111s","ind112s","ind113s","ind114s","ind121s","ind122s",
                "ind123s","ind124s","ind1311s","ind1312s","ind132s","ind141s","ind142s","ind143s","ind144s","ind1501s","ind1502s","ind1511s","ind1512s","ind1513s",
                "ind152s","ind1531s","ind1532s","ind154s","ind155s","ind156s","ind158s","ind161s","ind1612s","ind171s","ind2111s","ind2112s","ind2113s","ind221s",
                "ind222s","ind2121s","ind2122s","ind2123s","ind2131s","ind2132s","ind2133s","ind214s","ind2151s","ind2152s","ind2231s","ind2232s","ind2233s","ind224s",
                "ind231s","ind411s","ind412s","ind421s","ind422s","ind423s","ind423sFili","ind424s","ind431s","ind311s","ind321s","ind331s","ind343s","ind5111s",
                "ind5112s","ind5113s","ind5121s","ind5122s","ind513s","ind613s","ind7141s","ind7142s","bscRassctAccidentTravails","bscRassctInformationCollectivite",
                "bscRassctRealisationFormationSanteTravails","bscRassctPrevisionFormationSanteTravails","bscRassctAutresMesures","bscRassctPredictionsAutresMesures",
                "bscRassctNbMaladiePros","bscRassctNbAccidentTravails","bscRassctNatureLesions","bscRassctSiegeLesions","bscRassctElementMateriels","bscRassctMaladieProCaracPros",
                "bscGpeecNbAgentsTituEmpPermaParFoncEtAges","bscGpeecNiveauDiplomes","bscGpeecPlusNbAgentsParSpeEtAges","bscHanditorialQuestionsGenerales",
                "bscHanditorialQuestionsBoeths","bscHanditorialNatureHandicaps","bscHanditorialAvisInaptitudes","bscHanditorialMesureInaptitudes","bscHanditorialAvisInaptitudesAvant",
                "bscHanditorialMesureInaptitudesAvant","bscHanditorialAncienneteAgents","bscHanditorialModeEntrees","bscHanditorialStatutAgents","bscHanditorialArticles",
                "bscHanditorialModeSortiesTitulaire","bscHanditorialModeSortiesNonTitulaire","bscHanditorialDerniersDiplomes","bscHanditorialCadreEmplois","bscHanditorialMetiers",
                "bscHanditorialTempsComplets","bscHanditorialTempsPleins","bscDgclJoursCarenceTitulaires","bscDgclJoursCarenceContractuels","ind6141s","ind6142s","incoherenceLogs",
                "BilanSocialAgent",
            )
        );*/
        $config_delta_annee = $this->getConfigDeltaAnnee();

        $annee ?? date("Y");
        $select_str = "";
        /*$to_select = isset($config_delta_annee['full_select_current']) ? $config_delta_annee['full_select_current'] : array();
        $diff_annee_list = $config_delta_annee['annees_diff'];*/
        $fields_simple_identity = $config_delta_annee['simple_identity'];
        $fields_member_of = $config_delta_annee['member_of'];
        /*$i = 0;
        $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
        while ($diff_annee!=false && $annee<=$diff_annee) {
            $diff_annee_config = $diff_annee_list[$i];
            $to_remove = $diff_annee_config['to_remove'];
            foreach ($to_remove as $key => $one_to_rm) {
                $index_to_rm = array_search($one_to_rm,$to_select);
                if($index_to_rm!==false) array_splice($to_select, $index_to_rm, 1);
            }
            $i++;
            $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
        }*/
        $to_select = $this->getSelectListAnnee($annee);
        foreach ($to_select as $key => $field_name) {
            $to_simple_identity = in_array($field_name, $fields_simple_identity);
            $to_member_of = in_array($field_name, $fields_member_of);
            if($to_member_of) continue;
            $select_str .= !empty($select_str) ? ", " : "";
            if($to_simple_identity)  $select_str .= 'IDENTITY(';
            //if($to_member_of) $select_str .= 'MEMBER OF ';
            $select_str .= $field_name!=$table_alias ? $table_alias.'.'.$field_name : $field_name;
            if($to_simple_identity)  $select_str .= ') AS id'.ucfirst($field_name);
        }
        return $select_str;
    }
    protected $getSelectListAnnee = array();
    public function getSelectListAnnee($annee=null){
        $annee ?? date("Y");
        if(!isset($this->getSelectListAnnee[$annee])){
            $config_delta_annee = $this->getConfigDeltaAnnee();
            $to_select = isset($config_delta_annee['full_select_current']) ? $config_delta_annee['full_select_current'] : array();
            $diff_annee_list = $config_delta_annee['annees_diff'];
            $i = 0;
            $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
            while ($diff_annee!=false && $annee<=$diff_annee) {
                $diff_annee_config = $diff_annee_list[$i];
                $to_remove = $diff_annee_config['to_remove'];
                foreach ($to_remove as $key => $one_to_rm) {
                    $index_to_rm = array_search($one_to_rm,$to_select);
                    if($index_to_rm!==false) array_splice($to_select, $index_to_rm, 1);
                }
                $i++;
                $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
            }
        }else{
             $to_select = $this->getSelectListAnnee[$annee];
        }
        return $to_select;
    }
    public function getToRemoveForAnnee($annee=null){
        $annee ?? date("Y");
        $cache_key = $this->toCacheKey(['toRemoveFor',$annee]);
        if($this->hasCachedValue($cache_key)){
            return $this->getFromCache($cache_key);
        }else{
            $i = 0;
            $diff_annee_list =  $this->getConfigDeltaAnnee('annees_diff');
            $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
            $to_remove_for = array();
            while ($diff_annee!=false && $annee<=$diff_annee) {
                $diff_annee_config = $diff_annee_list[$i];
                $to_remove_add = $diff_annee_config['to_remove'];
                if($to_remove_add!=null){
                    $to_remove_for = array_merge($to_remove_for,$to_remove_add);
                }
                $i++;
                $diff_annee = isset($diff_annee_list[$i]) && isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
            }
            $this->setToCache($cache_key,$to_remove_for);
            return $to_remove_for;
        }
    }
    public function isPropInAnnee($prop_key,$annee=null){
        $to_remove = $this->getToRemoveForAnnee($annee);
        return !in_array($prop_key,$to_remove);
        /*$diff_annee_list =  $this->getConfigDeltaAnnee('annees_diff');
        $annee ?? date("Y");
        $i = 0;
        $is_to_remove = false;
        $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
        while ($diff_annee!=false && $annee<=$diff_annee) {
            $diff_annee_config = $diff_annee_list[$i];
            $to_remove = $diff_annee_config['to_remove'];
            $is_to_remove = in_array($prop_key,$to_remove);
            if($is_to_remove) break;
            $i++;
            $diff_annee = isset($diff_annee_list[$i]['annee']) ? $diff_annee_list[$i]['annee'] : false;
        }
        return !$is_to_remove;*/
    }
    /**
     * @param int $idColl
     *
     * @return array
     */
    public function findOneByActif($idColl, $idEnqu, $nmAnnee=null) {

        $qb = $this->_em->createQueryBuilder();
        $qb->from($this->_entityName, 'b')
            ->join('b.enquete', 'e')
            ->join('b.collectivite', 'c')
            ->where('c.idColl = :collect')
            ->andWhere('e.idEnqu = :idEnqu')
            ->setParameter('idEnqu', $idEnqu)
            ->setParameter('collect', $idColl);
        if($nmAnnee!=null){
            $select_str = $this->makeSelectDiffAnnee($nmAnnee,'b');
            $qb->select($select_str);//$qb->select("b");//
        }else{
            $qb->select('b')
                ->addSelect('e')
                ->addSelect('c');
        }

        try {
            $bilanSocialConsolide = $qb->getQuery()->getOneOrNullResult();
            $bilanSocialConsolide = $this->parseToEntity($bilanSocialConsolide, $nmAnnee);
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll

            return null;
        }

        return $bilanSocialConsolide;
    }

    public function findByActif($idbscs, $nmAnnee=null) {

        $qb = $this->_em->createQueryBuilder();
        $qb->from($this->_entityName, 'b')
            ->join('b.enquete', 'e')
            ->join('b.collectivite', 'c')
            ->where('b.idBilasocicons IN (:idbscs)')
            ->setParameter('idbscs', $idbscs);
        if($nmAnnee!=null){
            $select_str = $this->makeSelectDiffAnnee($nmAnnee,'b');
            $qb->select($select_str);//$qb->select("b");//
        }else{
            $qb->select('b')
                ->addSelect('e')
                ->addSelect('c');
        }

        try {
            $bilanSocialConsolides = $qb->getQuery()->getResult();
            foreach ($bilanSocialConsolides as $key => &$bsc) {
                $bsc = $this->parseToEntity($bsc, $nmAnnee);
            }
            
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll

            return null;
        }

        return $bilanSocialConsolides;
    }

    /**
     * @param int $idColl
     *
     * @return array
     */
    public function findLastOneByActif($idColl, $nmAnnee=null) {

        $qb = $this->_em->createQueryBuilder();
        $qb->from($this->_entityName, 'b')
            ->join('b.enquete', 'e')
            ->join('b.collectivite', 'c')
            ->where('c.idColl = :collect')
            //->andWhere('e.idEnqu = :idEnqu')
            //->setParameter('idEnqu', $idEnqu)
            ->setParameter('collect', $idColl)
            ->orderBy('e.idEnqu', 'DESC');
        if($nmAnnee!=null){
            $select_str = $this->makeSelectDiffAnnee($nmAnnee,'b');
            $qb->select($select_str);//$qb->select("b");//
        }else{
            $qb->select('b')
                ->addSelect('e')
                ->addSelect('c');
        }

        try {
            $bilanSocialConsolide = $qb->getQuery()->getOneOrNullResult();
            $bilanSocialConsolide = $this->parseToEntity($bilanSocialConsolide, $nmAnnee);
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll

            return null;
        }

        return $bilanSocialConsolide;
    }

    public function parseToEntity($data, $nmAnnee = null){
        $bsc = $data;
        if(is_array($data)){
            //$data = $bilanSocialConsolide;
            $bsc = new BilanSocialConsolide();
            $id_bsc = $data['idBilasocicons'];
            $id_coll = $data['idCollectivite'];
            $id_enqu = $data['idEnquete'];
            $id_quescollcons = $data['idQuestionCollectiviteConsolide'];
            $qb_coll = $this->_em->createQueryBuilder();
            /*$qb_coll->from($this->_entityName, 'b')
                ->join("b.collectivite","c")
                ->where("b.idBilasocicons = :id_bsc")
                ->select("c")
                ->setParameter('id_bsc', $id_bsc);*/
            $qb_coll->select("c")
                ->from("CollectiviteBundle:Collectivite", 'c')
                ->where("c.idColl = :id_coll")
                ->setParameter('id_coll', $id_coll);
            $bsc_coll = $qb_coll->getQuery()->getOneOrNullResult();
            $qb_enqu = $this->_em->createQueryBuilder();
            /*$qb_enqu->select("e")
                ->from($this->_entityName, 'b')
                ->join("b.enquete","e")
                ->where("b.idBilasocicons = :id_bsc")
                ->setParameter('id_bsc', $id_bsc);*/
            $qb_enqu->select("e")
                ->from("EnqueteBundle:Enquete", 'e')
                ->where("e.idEnqu = :id_enqu")
                ->setParameter('id_enqu', $id_enqu);
            $bsc_enqu = $qb_enqu->getQuery()->getOneOrNullResult();
            $qb_quest_coll = $this->_em->createQueryBuilder();
            $qb_quest_coll->select("q")
                ->from("ConsoBundle:QuestionCollectiviteConsolide", 'q')
                ->where("q.idQuescollcons = :id_quescollcons")
                ->setParameter('id_quescollcons', $id_quescollcons);
            $bsc_quest_coll = $qb_quest_coll->getQuery()->getOneOrNullResult();
            $data['collectivite'] = $bsc_coll;
            $data['enquete'] = $bsc_enqu;
            $data['questionCollectiviteConsolide'] = $bsc_quest_coll;
            $member_of = $this->getConfigDeltaAnnee('member_of');
            foreach ($member_of as $iter => $prop_key) {
                if($this->isPropInAnnee($prop_key,$nmAnnee)){
                    $qb_inds_member_of = $this->_em->createQueryBuilder();
                    $temp_member_alias = "temp_alias_".$prop_key;
                    $temp_member_entity = $this->getConfigDeltaAnnee(['member_of_entity',$prop_key]);
                    if($temp_member_entity!=null){
                        $qb_inds_member_of->select($temp_member_alias)
                            ->from($temp_member_entity,$temp_member_alias)
                            ->join($temp_member_alias.'.bilanSocialConsolide','b')
                            ->where('b.idBilasocicons = :id_bsc')
                            ->setParameter('id_bsc', $id_bsc);
                        $temp_member_collection = $qb_inds_member_of->getQuery()->getResult();
                        $data[$prop_key]=new ArrayCollection($temp_member_collection);
                    } 
                }
            }
            $bsc->hydrate($data);
        }
        return $bsc;
    }

    public function getConsolide($idColl, $idEnqu) {


//        $idColl = $user->getCollectivite()->getIdColl();
        $qb = $this->_em->createQueryBuilder();
        $consolide = [];

        //error_log($this->_entityName, 0);
        //error_log('idColl ' . $idColl , 0);
        //error_log('idEnqu ' . $idEnqu , 0);

        $qb->select('b')
                ->from($this->_entityName, 'b')
                ->join('b.enquete', 'e')
                ->addSelect('e')
                ->join('b.collectivite', 'c')
                ->addSelect('c')
                ->where('c.idColl = :collect')
                ->setParameter('collect', $idColl)
                ->andWhere('e.idEnqu = :idEnqu')
                ->setParameter('idEnqu', $idEnqu)
        ;
        try {
            //error_log('prepare select', 0);

            $bilanSocialConsolide = $qb->getQuery()->getSingleResult();

            if ($bilanSocialConsolide == null) {
                return null;
            }

            //error_log('end select', 0);
            if ($bilanSocialConsolide->getBilanSocialAgent() != null) {
                //error_log('ok',0);
                $consolide = ['consolide' => '1'];
            } else {
                //error_log('ko',0);
                $consolide = ['consolide' => '0'];
            }

            //error_log('Fin service',0);
        } catch (NoResultException $e) {
            //error_log('error ', 0);
            //$consolide = ['consolide' => '0'];
            return null;
        }

        return $consolide;
    }

    public function findByTransmis($idColl, $idEnqu) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('b')
                ->from($this->_entityName, 'b')
                ->join('b.enquete', 'e')
                ->addSelect('e')
                ->join('b.collectivite', 'c')
                ->addSelect('c')
                ->where('c.idColl = :collect')
                ->setParameter('collect', $idColl)
                ->andWhere('e.idEnqu = :idEnqu')
                ->setParameter('idEnqu', $idEnqu)
        ;

        try {
            $bilanSocialConsolide = $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            $bilanSocialConsolide = null;

            return $bilanSocialConsolide;
        }

        return $bilanSocialConsolide;
    }
    
    public function findTransmisByCollectivite($idColl){
        $qb = $this->_em->createQueryBuilder();
        $qb->select(array('b.fgStat','SUM(ind111.r1115) AS val1','SUM(ind111.r1116) AS val2','SUM(ind121.r1215) AS val3','SUM(ind121.r1216) AS val4','SUM(ind121.r1217) AS val5','SUM(ind121.r1218) AS val6','SUM(ind1311.r13111) AS val7','SUM(ind1311.r13112) AS val8','SUM(ind1311.r13113) AS val9','SUM(ind1311.r13114) AS val10','SUM(ind1312.r13121) AS val11','SUM(ind1312.r13122) AS val12'))
                ->from($this->_entityName, 'b')
                ->join('b.enquete', 'e')
                ->join('b.collectivite', 'c')
                ->leftJoin('ConsoBundle:Ind111', 'ind111', 'WITH', 'ind111.bilanSocialConsolide = b.idBilasocicons')
                ->leftJoin('ConsoBundle:Ind121', 'ind121', 'WITH', 'ind121.bilanSocialConsolide = b.idBilasocicons')
                ->leftJoin('ConsoBundle:Ind1311', 'ind1311', 'WITH', 'ind1311.bilanSocialConsolide = b.idBilasocicons')
                ->leftJoin('ConsoBundle:Ind1312', 'ind1312', 'WITH', 'ind1312.bilanSocialConsolide = b.idBilasocicons')
                ->where('c.idColl = :collect')
                ->setParameter('collect', $idColl)
                ->andWhere('e.fgStat = 1')
                ->andWhere('b.fgStat IN (1,5)')
        ;

        try {
            $bilanSocialConsolide = $qb->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            $bilanSocialConsolide = null;

            return $bilanSocialConsolide;
        }

        return $bilanSocialConsolide;
    }
    
    public function getAllBsValide(){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('b.idBilasocicons AS id', 'c.nmSire')
                ->from($this->_entityName, 'b')
                ->join('b.enquete', 'e')
                ->join('b.collectivite', 'c')
                ->leftJoin('CampagneBundle:Campagne', 'ca', 'WITH', 'ca.idCamp = e.idCamp')
                ->where('b.fgStat = 2')
                ->andWhere('ca.fgStat = 1');
//                ->setMaxResults(5);
        ;

        try {
            $bilanSocialConsolide = $qb->getQuery()->getResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            $bilanSocialConsolide = null;

            return $bilanSocialConsolide;
        }

        return $bilanSocialConsolide;
    }
    
    
    
    public function getNbAgentByStatut(){
        $rsm = new ResultSetMapping();

        $query = $this->_em->createNativeQuery('SELECT 
                COALESCE(SUM(NB_AGENT_TITULAIRE),0) AS Titulaire, 
                COALESCE(SUM(NB_AGENT_EMPLOI_PERMANENT),0) AS EmploiPermanent, 
                COALESCE(SUM(NB_AGENT_CONTRACTUEL_EMPLOI_NON_PERMANENT),0) AS ContEmploiNonPermanent, 
                COALESCE(SUM(NB_AGENT_CONTRACTUEL_EMPLOI_PERMANENT),0) AS ContEmploiPermanent
                FROM bilan_social_consolide', $rsm);

        $nbAgents = $query->getResult();

        return $nbAgents;
    }

    public function getQHandiB22($idsBsc) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('bsch.qHandiB22')
            ->from($this->_entityName, 'bsch')
            ->where('bsch.idBilasocicons IN(:idsBsc)')
            ->setParameter('idsBsc', $idsBsc);
        try {
            $result = $qb->getQuery()->getResult();
        }
        catch (NoResultException $e) {
            // Pas de enquete active consolidé pour la collectivite
            $result = null;
        }

        return $result;
    }

    public function getQHandiB23($idsBsc) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('bsch.qHandiB23')
            ->from($this->_entityName, 'bsch')
            ->where('bsch.idBilasocicons IN(:idsBsc)')
            ->setParameter('idsBsc', $idsBsc);
        try {
            $result = $qb->getQuery()->getResult();
        }
        catch (NoResultException $e) {
            // Pas de enquete active consolidé pour la collectivite
            $result = null;
        }

        return $result;
    }
}

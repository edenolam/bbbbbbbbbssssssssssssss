<?php

namespace Bilan_Social\Bundle\ActualiteBundle\Repository;

/**
 * ActualiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActualiteRepository extends \Doctrine\ORM\EntityRepository
{

/* Recupere tout les actualites que l'admin a crÃ©e */
    function findActualiteByAdmin() {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
                ->from($this->_entityName, 'e')
                ->join('e.cdgs', 'cdg');

        try {
            $actualites = $qb->getQuery()->getResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $actualites;
    }

    function findActualiteByCDG($utilisateur) {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
                ->from($this->_entityName, 'e')
                ->join('e.cdgDepartements', 'cd')
                ->join('cd.cdg', 'c')
                ->join('c.cdgUtilisateurs', 'uc')
                ->where('uc.utilisateur = :utilisateur')
                ->setParameter('utilisateur', $utilisateur);
        try {
            $actualites = $qb->getQuery()->getResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $actualites;
    }

    function findActualiteActiveByCDG($idCdgList) {
        $today = new \DateTime();
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
                ->from($this->_entityName, 'a')
                ->join('a.cdgs', 'cdg')
                ->join('FileManagerBundle:Fichier', 'f', 'WITH', 'f.fileKey = a.fileKeyImg')
                ->where('cdg.idCdg IN (:idcdglist)')
                ->andWhere('a.blPublish = 1')
                ->andWhere(':Today >= a.DtDebut')
                ->andWhere('a.DtFin is null OR :Today <= a.DtFin ')
                ->setParameter('Today', $today)
                ->setParameter('idcdglist', $idCdgList);

        try {
            $actualites = $qb->getQuery()->getResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $actualites;
    }

    function findActualiteActiveByCollectivite($utilisateur) {

        $today = new \DateTime();
        $idColl = $utilisateur->getCollectivite();
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
                ->from($this->_entityName, 'a')
                ->join('a.cdgDepartements', 'cd')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'cd.departement = d.idDepa')
                ->join('d.collectivites', 'c')
                ->leftJoin('FileManagerBundle:Fichier', 'f', 'WITH', 'f.fileKey = a.fileKeyImg')
                ->where('c.idColl = :idColl')
                ->andWhere('a.blPublish = 1')
                ->andWhere(':Today >= a.DtDebut')
                ->andWhere('a.DtFin is null OR :Today <= a.DtFin ')
                ->setParameter('Today', $today)
                ->setParameter('idColl',$idColl)
                ;
        try {
            $actualites = $qb->getQuery()->getResult();

        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return null;
        }
        return $actualites;
    }
    public function isOwnedByCdg($cdg,$actualite){
        $is_owned = false;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(DISTINCT a) AS isOwned')
                ->from($this->_entityName, 'a')
                ->leftJoin('a.cdgDepartements', 'cd')
                ->leftJoin('a.cdgs', 'ca')
                ->leftJoin('cd.cdg', 'cdg')
                ->where('(cdg.idCdg = :cdg OR ca.idCdg = :cdg)')
                ->andWhere('a.id = :actualite')
                ->setParameter('actualite', $actualite)
                ->setParameter('cdg',$cdg);
                ;
        try {
            $query = $qb->getQuery();
            $is_owned = $query->getSingleResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_owned['isOwned'];
    }

    public function isReadableByCdg($cdg, $actualite) {
        $is_readable = false;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(a) AS isReadable')
                ->from($this->_entityName, 'a')
                ->leftJoin('a.cdgDepartements', 'cd')
                ->leftJoin('a.cdgs', 'ca')
                ->leftJoin('cd.cdg', 'cdg')
                ->where('(cdg.idCdg = :cdg OR ca.idCdg = :cdg)')
                ->andWhere('a.id = :actualite')
                ->setParameter('actualite', $actualite)
                ->setParameter('cdg', $cdg);
        ;
        try {
            $query = $qb->getQuery();
            $is_readable = $query->getSingleResult();
        }
        catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_readable['isReadable'];
    }

    public function isOwnedByColl($collectivite,$actualite){
        $is_owned = false;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(a) AS isOwned')
                ->from($this->_entityName, 'a')
                ->join('a.cdgDepartements', 'cd')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'cd.departement = d.idDepa')
                ->join('d.collectivites', 'c')
                ->leftJoin('FileManagerBundle:Fichier', 'f', 'WITH', 'f.fileKey = a.fileKeyImg')
                ->where('c.idColl = :collectivite')
                ->andWhere('a.getId = :actualite')
                ->andWhere('a.blPublish = 1')
                ->andWhere('CURRENT_DATE() >= a.DtDebut')
                ->andWhere('a.DtFin is null OR CURRENT_DATE() <= a.DtFin ')
                ->setParameter('actualite', $actualite)
                ->setParameter('collectivite',$collectivite);
                ;
        try {
            $query = $qb->getQuery();
            
        
            $is_owned = $query->getSingleResult();
        } catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_owned['isOwned'];
    }
    public function isReadableByColl($collectivite, $actualite) {
        $is_readable = false;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(a) AS isReadable')
                ->from($this->_entityName, 'a')
                ->join('a.cdgDepartements', 'cd')
                ->join('CollectiviteBundle:Departement', 'd', 'WITH', 'cd.departement = d.idDepa')
                ->join('d.collectivites', 'c')
                ->leftJoin('FileManagerBundle:Fichier', 'f', 'WITH', 'f.fileKey = a.fileKeyImg')
                ->where('c.idColl = :collectivite')
                ->andWhere('a.id = :actualite')
                ->andWhere('a.blPublish = 1')
                ->andWhere('CURRENT_DATE() >= a.DtDebut')
                ->andWhere('a.DtFin is null OR CURRENT_DATE() <= a.DtFin ')
                ->setParameter('actualite', $actualite)
                ->setParameter('collectivite', $collectivite);
        ;
        try {
            $query = $qb->getQuery();


            $is_readable = $query->getSingleResult();
        }
        catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_readable['isReadable'];
    }
    
    public function isOwnedByAdmin($user, $actualite) {
        $is_owned = false;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(a) AS isOwned')
                ->from($this->_entityName, 'a')
                ->leftJoin('a.cdgDepartements', 'cd')
                ->join('a.cdgs', 'ca')
                ->leftJoin('cd.cdg', 'cdg')
                ->where('(cdg.idCdg IS NULL AND ca.idCdg IS NOT NULL)')
                ->andWhere('a.id = :actualite')
                ->setParameter('actualite', $actualite)
        ;
        try {
            $query = $qb->getQuery();
            $is_owned = $query->getSingleResult();
        }
        catch (NoResultException $e) {
            // Pas de bilan pour cette enquete et coll
            return false;
        }
        return $is_owned['isOwned'];
    }

}
